#!/usr/bin/env php
<?php
// Define SECURE_ACCESS for CLI usage
define('SECURE_ACCESS', true);

require_once __DIR__ . '/../includes/functions.php';
require_once __DIR__ . '/../includes/oauth2.php';
require_once __DIR__ . '/../includes/api_keys.php';
require_once __DIR__ . '/../includes/vr_cat_interaction.php';
require_once __DIR__ . '/../includes/ai_cat_behavior.php';
require_once __DIR__ . '/../includes/cat_trading.php';
require_once __DIR__ . '/../includes/cat_shows.php';
require_once __DIR__ . '/../includes/realtime_multiplayer.php';
require_once __DIR__ . '/../includes/cat_health_monitoring.php';

define('CLI_VERSION', '2.1.0');
define('CLI_CONFIG_FILE', $_SERVER['HOME'] . '/.purrr/config.json');

class PurrrCLI {
    private $config;
    private $apiUrl;
    private $accessToken;
    private $apiKey;

    public function __construct() {
        $this->loadConfig();
        $this->parseArguments();
    }

    private function loadConfig() {
        $configDir = dirname(CLI_CONFIG_FILE);
        if (!is_dir($configDir)) {
            mkdir($configDir, 0755, true);
        }
        
        if (file_exists(CLI_CONFIG_FILE)) {
            $this->config = json_decode(file_get_contents(CLI_CONFIG_FILE), true);
            $this->apiUrl = $this->config['api_url'] ?? 'https://api.purrr.love';
            $this->accessToken = $this->config['access_token'] ?? null;
            $this->apiKey = $this->config['api_key'] ?? null;
        } else {
            $this->config = [
                'api_url' => 'https://api.purrr.love',
                'access_token' => null,
                'api_key' => null,
                'user_id' => null
            ];
            $this->saveConfig();
        }
    }

    private function saveConfig() {
        file_put_contents(CLI_CONFIG_FILE, json_encode($this->config, JSON_PRETTY_PRINT));
    }

    private function parseArguments() {
        $args = $_SERVER['argv'];
        array_shift($args); // Remove script name
        
        if (empty($args)) {
            $this->showHelp();
            return;
        }

        $command = array_shift($args);
        $this->dispatchCommand($command, $args);
    }

    private function dispatchCommand($command, $args) {
        switch ($command) {
            case 'login':
                $this->commandLogin($args);
                break;
            case 'logout':
                $this->commandLogout($args);
                break;
            case 'cats':
                $this->commandCats($args);
                break;
            case 'games':
                $this->commandGames($args);
                break;
            case 'breeding':
                $this->commandBreeding($args);
                break;
            case 'quests':
                $this->commandQuests($args);
                break;
            case 'store':
                $this->commandStore($args);
                break;
            case 'keys':
                $this->commandApiKeys($args);
                break;
            case 'vr':
                $this->commandVR($args);
                break;
            case 'ai':
                $this->commandAI($args);
                break;
            // Administrative Commands
            case 'admin':
                $this->commandAdmin($args);
                break;
            case 'setup':
                $this->commandSetup($args);
                break;
            case 'db':
                $this->commandDatabase($args);
                break;
            case 'system':
                $this->commandSystem($args);
                break;
            case 'support':
                $this->commandSupport($args);
                break;
            case 'trading':
                $this->commandTrading($args);
                break;
            case 'shows':
                $this->commandShows($args);
                break;
            case 'multiplayer':
                $this->commandMultiplayer($args);
                break;
            case 'health':
                $this->commandHealth($args);
                break;
            case 'analytics':
                $this->commandAnalytics($args);
                break;
            case 'special':
                $this->commandSpecial($args);
                break;
            case 'nightwatch':
            case 'night':
                $this->commandNightWatch($args);
                break;
            case 'blockchain':
            case 'nft':
                $this->commandBlockchain($args);
                break;
            case 'ml':
            case 'personality':
                $this->commandMLPersonality($args);
                break;
            case 'metaverse':
            case 'vr':
                $this->commandMetaverse($args);
                break;
                    case 'webhooks':
            $this->commandWebhooks($args);
            break;
            
        case 'lost-pet':
        case 'finder':
            $this->commandLostPetFinder($args);
            break;
            case 'config':
                $this->commandConfig($args);
                break;
            case 'version':
                $this->commandVersion($args);
                break;
            case 'help':
            case '--help':
            case '-h':
                $this->showHelp();
                break;
            default:
                echo Colors::RED . "❌ Unknown command: $command" . Colors::NC . "\n";
                echo "Use 'purrr help' to see available commands.\n";
                break;
        }
    }

    // ============================================================================
    // ADMINISTRATIVE COMMANDS
    // ============================================================================

    private function commandAdmin($args) {
        if (empty($args)) {
            $this->showAdminHelp();
            return;
        }

        $subcommand = array_shift($args);
        switch ($subcommand) {
            case 'status':
                $this->adminStatus($args);
                break;
            case 'users':
                $this->adminUsers($args);
                break;
            case 'keys':
                $this->adminKeys($args);
                break;
            case 'logs':
                $this->adminLogs($args);
                break;
            case 'config':
                $this->adminConfig($args);
                break;
            case 'help':
            default:
                $this->showAdminHelp();
                break;
        }
    }

    private function commandSetup($args) {
        if (!$this->requireAdminKey()) {
            return;
        }

        if (empty($args)) {
            $this->showSetupHelp();
            return;
        }

        $subcommand = array_shift($args);
        switch ($subcommand) {
            case 'database':
                $this->setupDatabase($args);
                break;
            case 'tables':
                $this->setupTables($args);
                break;
            case 'admin':
                $this->setupAdmin($args);
                break;
            case 'system':
                $this->setupSystem($args);
                break;
            case 'help':
            default:
                $this->showSetupHelp();
                break;
        }
    }

    private function commandDatabase($args) {
        if (!$this->requireDatabaseKey()) {
            return;
        }

        if (empty($args)) {
            $this->showDatabaseHelp();
            return;
        }

        $subcommand = array_shift($args);
        switch ($subcommand) {
            case 'status':
                $this->dbStatus($args);
                break;
            case 'repair':
                $this->dbRepair($args);
                break;
            case 'backup':
                $this->dbBackup($args);
                break;
            case 'restore':
                $this->dbRestore($args);
                break;
            case 'optimize':
                $this->dbOptimize($args);
                break;
            case 'migrate':
                $this->dbMigrate($args);
                break;
            case 'help':
            default:
                $this->showDatabaseHelp();
                break;
        }
    }

    private function commandSystem($args) {
        if (!$this->requireSystemKey()) {
            return;
        }

        if (empty($args)) {
            $this->showSystemHelp();
            return;
        }

        $subcommand = array_shift($args);
        switch ($subcommand) {
            case 'status':
                $this->systemStatus($args);
                break;
            case 'health':
                $this->systemHealth($args);
                break;
            case 'logs':
                $this->systemLogs($args);
                break;
            case 'cache':
                $this->systemCache($args);
                break;
            case 'restart':
                $this->systemRestart($args);
                break;
            case 'help':
            default:
                $this->showSystemHelp();
                break;
        }
    }

    private function commandSupport($args) {
        if (!$this->requireSupportKey()) {
            echo Colors::RED . "❌ Error: Support key required for this operation" . Colors::NC . "\n";
            echo "   Use: purrr keys support <support_key>\n";
            return;
        }

        if (empty($args)) {
            $this->showSupportHelp();
            return;
        }

        $subcommand = array_shift($args);
        switch ($subcommand) {
            case 'tickets':
                $this->supportTickets($args);
                break;
            case 'users':
                $this->supportUsers($args);
                break;
            case 'logs':
                $this->supportLogs($args);
                break;
            case 'help':
            default:
                $this->showSupportHelp();
                break;
        }
    }

    // ============================================================================
    // AUTHENTICATION METHODS
    // ============================================================================

    private function requireAdminKey() {
        if (!$this->hasAdminKey()) {
            echo Colors::RED . "❌ Error: Admin key required for this operation" . Colors::NC . "\n";
            echo "   Use: purrr keys admin <admin_key>\n";
            return false;
        }
        return true;
    }

    private function requireDatabaseKey() {
        if (!$this->hasDatabaseKey()) {
            echo Colors::RED . "❌ Error: Database key required for this operation" . Colors::NC . "\n";
            echo "   Use: purrr keys set database <database_key>\n";
            return false;
        }
        return true;
    }

    private function requireSystemKey() {
        if (!$this->hasSystemKey()) {
            echo Colors::RED . "❌ Error: System key required for this operation" . Colors::NC . "\n";
            echo "   Use: purrr keys set system <system_key>\n";
            return false;
        }
        return true;
    }

    private function requireSupportKey() {
        if (!$this->hasSupportKey()) {
            echo Colors::RED . "❌ Error: Support key required for this operation" . Colors::NC . "\n";
            echo "   Use: purrr keys set support <support_key>\n";
            return false;
        }
        return true;
    }

    private function hasAdminKey() {
        return isset($this->config['admin_key']) && !empty($this->config['admin_key']);
    }

    private function hasDatabaseKey() {
        return isset($this->config['database_key']) && !empty($this->config['database_key']);
    }

    private function hasSystemKey() {
        return isset($this->config['system_key']) && !empty($this->config['system_key']);
    }

    private function hasSupportKey() {
        return isset($this->config['support_key']) && !empty($this->config['support_key']);
    }

    // ============================================================================
    // ADMINISTRATIVE IMPLEMENTATION METHODS
    // ============================================================================

    private function adminStatus($args) {
        echo Colors::CYAN . "🔧 Admin Status Check" . Colors::NC . "\n";
        echo "====================\n";
        
        // Check system health
        $health = $this->apiRequest('GET', '/api/health.php');
        if ($health) {
            echo "✅ System Health: " . ($health['status'] ?? 'Unknown') . "\n";
            echo "   Database: " . ($health['database']['status'] ?? 'Unknown') . "\n";
            echo "   Cache: " . ($health['cache']['status'] ?? 'Unknown') . "\n";
        }
        
        // Check user count
        $users = $this->apiRequest('GET', '/api/v1/users?limit=1');
        if ($users) {
            echo "👥 Total Users: " . ($users['total'] ?? 'Unknown') . "\n";
        }
        
        // Check API usage
        $usage = $this->apiRequest('GET', '/api/v1/analytics/usage');
        if ($usage) {
            echo "📊 API Requests: " . ($usage['total_requests'] ?? 'Unknown') . "\n";
        }
    }

    private function adminUsers($args) {
        if (empty($args)) {
            $users = $this->apiRequest('GET', '/api/v1/users?limit=50');
            if ($users && isset($users['data'])) {
                echo Colors::CYAN . "👥 User List (showing first 50)" . Colors::NC . "\n";
                echo "==============================\n";
                foreach ($users['data'] as $user) {
                    echo sprintf("ID: %d | Email: %s | Status: %s | Created: %s\n",
                        $user['id'], $user['email'], $user['status'], $user['created_at']);
                }
            }
        } else {
            $userId = $args[0];
            $user = $this->apiRequest('GET', "/api/v1/users/{$userId}");
            if ($user) {
                echo Colors::CYAN . "👤 User Details" . Colors::NC . "\n";
                echo "===============\n";
                echo "ID: " . $user['id'] . "\n";
                echo "Email: " . $user['email'] . "\n";
                echo "Status: " . $user['status'] . "\n";
                echo "Created: " . $user['created_at'] . "\n";
            }
        }
    }

    private function adminKeys($args) {
        $keys = $this->apiRequest('GET', '/api/v1/keys');
        if ($keys && isset($keys['data'])) {
            echo Colors::CYAN . "🔑 API Keys" . Colors::NC . "\n";
            echo "===========\n";
            foreach ($keys['data'] as $key) {
                echo sprintf("ID: %d | Name: %s | Scopes: %s | Status: %s\n",
                    $key['id'], $key['name'], implode(',', $key['scopes']), $key['status']);
            }
        }
    }

    private function adminLogs($args) {
        $logs = $this->apiRequest('GET', '/api/v1/logs?limit=100');
        if ($logs && isset($logs['data'])) {
            echo Colors::CYAN . "📝 System Logs (last 100)" . Colors::NC . "\n";
            echo "=========================\n";
            foreach ($logs['data'] as $log) {
                echo sprintf("[%s] %s: %s\n",
                    $log['timestamp'], $log['level'], $log['message']);
            }
        }
    }

    private function adminConfig($args) {
        echo Colors::CYAN . "⚙️  System Configuration" . Colors::NC . "\n";
        echo "======================\n";
        echo "API URL: " . $this->apiUrl . "\n";
        echo "Admin Key: " . ($this->hasAdminKey() ? "✅ Set" : "❌ Not set") . "\n";
        echo "Database Key: " . ($this->hasDatabaseKey() ? "✅ Set" : "❌ Not set") . "\n";
        echo "System Key: " . ($this->hasSystemKey() ? "✅ Set" : "❌ Not set") . "\n";
        echo "Support Key: " . ($this->hasSupportKey() ? "✅ Set" : "❌ Not set") . "\n";
    }

    private function setupDatabase($args) {
        echo Colors::CYAN . "🗄️  Setting up database..." . Colors::NC . "\n";
        
        // Import schema
        $schemaFiles = [
            '../database/schema.sql',
            '../database/api_schema.sql',
            '../database/night_watch_schema.sql',
            '../database/security_schema.sql',
            '../database/advanced_features_schema.sql',
            '../database/lost_pet_finder_schema.sql'
        ];
        
        foreach ($schemaFiles as $schemaFile) {
            if (file_exists($schemaFile)) {
                echo "   Importing: " . basename($schemaFile) . "\n";
                $this->importSchema($schemaFile);
            }
        }
        
        echo Colors::GREEN . "✅ Database setup complete" . Colors::NC . "\n";
    }

    private function setupTables($args) {
        echo Colors::CYAN . "📋 Setting up application tables..." . Colors::NC . "\n";
        
        // Create core tables
        $tables = [
            'users', 'cats', 'api_keys', 'oauth_clients',
            'lost_pet_reports', 'pet_sightings', 'nfts',
            'metaverse_worlds', 'ml_models', 'webhooks'
        ];
        
        foreach ($tables as $table) {
            echo "   Creating table: {$table}\n";
            $this->createTable($table);
        }
        
        echo Colors::GREEN . "✅ Tables setup complete" . Colors::NC . "\n";
    }

    private function setupAdmin($args) {
        if (empty($args)) {
            echo Colors::RED . "Usage: purrr setup admin <email> <password> [name]" . Colors::NC . "\n";
            return;
        }
        
        $email = $args[0];
        $password = $args[1];
        $name = $args[2] ?? 'Administrator';
        
        echo Colors::CYAN . "👑 Setting up admin user..." . Colors::NC . "\n";
        
        $adminData = [
            'email' => $email,
            'password' => $password,
            'name' => $name,
            'role' => 'admin',
            'permissions' => ['*']
        ];
        
        $result = $this->apiRequest('POST', '/api/v1/users', $adminData);
        if ($result) {
            echo Colors::GREEN . "✅ Admin user created: {$email}" . Colors::NC . "\n";
        } else {
            echo Colors::RED . "❌ Failed to create admin user" . Colors::NC . "\n";
        }
    }

    private function setupSystem($args) {
        echo Colors::CYAN . "⚙️  Setting up system configuration..." . Colors::NC . "\n";
        
        // Set default configuration
        $config = [
            'app_name' => 'Purrr.love',
            'app_version' => '2.0.0',
            'environment' => 'production',
            'debug' => false,
            'maintenance_mode' => false
        ];
        
        $result = $this->apiRequest('POST', '/api/v1/config', $config);
        if ($result) {
            echo Colors::GREEN . "✅ System configuration set" . Colors::NC . "\n";
        } else {
            echo Colors::RED . "❌ Failed to set system configuration" . Colors::NC . "\n";
        }
    }

    private function dbStatus($args) {
        echo Colors::CYAN . "🗄️  Database Status" . Colors::NC . "\n";
        echo "==================\n";
        
        $status = $this->apiRequest('GET', '/api/health.php');
        if ($status && isset($status['database'])) {
            echo "Status: " . $status['database']['status'] . "\n";
            echo "Version: " . $status['database']['version'] . "\n";
            echo "Size: " . $status['database']['size'] . "\n";
            echo "Connections: " . $status['database']['connections'] . "\n";
        }
    }

    private function dbRepair($args) {
        echo Colors::CYAN . "🔧 Repairing database..." . Colors::NC . "\n";
        
        $result = $this->apiRequest('POST', '/api/v1/admin/database/repair');
        if ($result) {
            echo Colors::GREEN . "✅ Database repair completed" . Colors::NC . "\n";
        } else {
            echo Colors::RED . "❌ Database repair failed" . Colors::NC . "\n";
        }
    }

    private function dbBackup($args) {
        $filename = $args[0] ?? 'backup_' . date('Y-m-d_H-i-s') . '.sql';
        echo Colors::CYAN . "💾 Creating database backup: {$filename}" . Colors::NC . "\n";
        
        $result = $this->apiRequest('POST', '/api/v1/admin/database/backup', ['filename' => $filename]);
        if ($result) {
            echo Colors::GREEN . "✅ Backup created: {$filename}" . Colors::NC . "\n";
        } else {
            echo Colors::RED . "❌ Backup failed" . Colors::NC . "\n";
        }
    }

    private function dbRestore($args) {
        if (empty($args)) {
            echo Colors::RED . "Usage: purrr db restore <backup_file>" . Colors::NC . "\n";
            return;
        }
        
        $filename = $args[0];
        echo Colors::CYAN . "🔄 Restoring database from: {$filename}" . Colors::NC . "\n";
        
        $result = $this->apiRequest('POST', '/api/v1/admin/database/restore', ['filename' => $filename]);
        if ($result) {
            echo Colors::GREEN . "✅ Database restored from: {$filename}" . Colors::NC . "\n";
        } else {
            echo Colors::RED . "❌ Database restore failed" . Colors::NC . "\n";
        }
    }

    private function dbOptimize($args) {
        echo Colors::CYAN . "⚡ Optimizing database..." . Colors::NC . "\n";
        
        $result = $this->apiRequest('POST', '/api/v1/admin/database/optimize');
        if ($result) {
            echo "✅ Database optimization completed\n";
        } else {
            echo Colors::RED . "❌ Database optimization failed" . Colors::NC . "\n";
        }
    }

    private function dbMigrate($args) {
        echo Colors::CYAN . "🔄 Running database migrations..." . Colors::NC . "\n";
        
        $result = $this->apiRequest('POST', '/api/v1/admin/database/migrate');
        if ($result) {
            echo Colors::GREEN . "✅ Database migrations completed" . Colors::NC . "\n";
        } else {
            echo Colors::RED . "❌ Database migrations failed" . Colors::NC . "\n";
        }
    }

    private function systemStatus($args) {
        echo Colors::CYAN . "🖥️  System Status" . Colors::NC . "\n";
        echo "================\n";
        
        $status = $this->apiRequest('GET', '/api/health.php');
        if ($status) {
            echo "Overall Status: " . $status['status'] . "\n";
            echo "Uptime: " . ($status['uptime'] ?? 'Unknown') . "\n";
            echo "Memory Usage: " . ($status['memory'] ?? 'Unknown') . "\n";
            echo "CPU Usage: " . ($status['cpu'] ?? 'Unknown') . "\n";
        }
    }

    private function systemHealth($args) {
        echo Colors::CYAN . "❤️  System Health Check" . Colors::NC . "\n";
        echo "======================\n";
        
        $health = $this->apiRequest('GET', '/api/health.php?detailed=1');
        if ($health) {
            foreach ($health as $component => $status) {
                if (is_array($status)) {
                    echo "{$component}: " . ($status['status'] ?? 'Unknown') . "\n";
                } else {
                    echo "{$component}: {$status}\n";
                }
            }
        }
    }

    private function systemLogs($args) {
        $logs = $this->apiRequest('GET', '/api/v1/admin/system/logs?limit=100');
        if ($logs && isset($logs['data'])) {
            echo Colors::CYAN . "📝 System Logs (last 100)" . Colors::NC . "\n";
            echo "=========================\n";
            foreach ($logs['data'] as $key => $log) {
                echo sprintf("[%s] %s: %s\n",
                    $log['timestamp'], $log['level'], $log['message']);
            }
        }
    }

    private function systemCache($args) {
        if (empty($args)) {
            $status = $this->apiRequest('GET', '/api/v1/admin/system/cache');
            if ($status) {
                echo Colors::CYAN . "🗄️  Cache Status" . Colors::NC . "\n";
                echo "===============\n";
                echo "Status: " . $status['status'] . "\n";
                echo "Size: " . $status['size'] . "\n";
                echo "Hit Rate: " . $status['hit_rate'] . "\n";
            }
        } else {
            $action = $args[0];
            switch ($action) {
                case 'clear':
                    $result = $this->apiRequest('POST', '/api/v1/admin/database/clear');
                    echo $result ? Colors::GREEN . "✅ Cache cleared" . Colors::NC . "\n" : Colors::RED . "❌ Cache clear failed" . Colors::NC . "\n";
                    break;
                case 'warm':
                    $result = $this->apiRequest('POST', '/api/v1/admin/database/warm');
                    echo $result ? Colors::GREEN . "✅ Cache warmed" . Colors::NC . "\n" : Colors::RED . "❌ Cache warm failed" . Colors::NC . "\n";
                    break;
                default:
                    echo Colors::RED . "Usage: purrr system cache [clear|warm]" . Colors::NC . "\n";
            }
        }
    }

    private function systemRestart($args) {
        echo Colors::CYAN . "🔄 Restarting system services..." . Colors::NC . "\n";
        
        $result = $this->apiRequest('POST', '/api/v1/admin/system/restart');
        if ($result) {
            echo Colors::GREEN . "✅ System restart initiated" . Colors::NC . "\n";
        } else {
            echo Colors::RED . "❌ System restart failed" . Colors::NC . "\n";
        }
    }

    private function supportTickets($args) {
        $tickets = $this->apiRequest('GET', '/api/v1/support/tickets');
        if ($tickets && isset($tickets['data'])) {
            echo Colors::CYAN . "🎫 Support Tickets" . Colors::NC . "\n";
            echo "================\n";
            foreach ($tickets['data'] as $ticket) {
                echo sprintf("ID: %d | User: %s | Subject: %s | Status: %s\n",
                    $ticket['id'], $ticket['user_email'], $ticket['subject'], $ticket['status']);
                break;
            }
        }
    }

    private function supportUsers($args) {
        if (empty($args)) {
            $users = $this->apiRequest('GET', '/api/v1/support/users');
            if ($users && isset($users['data'])) {
                echo Colors::CYAN . "👥 Support Users" . Colors::NC . "\n";
                echo "================\n";
                foreach ($users['data'] as $user) {
                    echo sprintf("ID: %d | Email: %s | Status: %s | Last Login: %s\n",
                        $user['id'], $user['email'], $user['status'], $user['last_login']);
                }
            }
        } else {
            $userId = $args[0];
            $user = $this->apiRequest('GET', "/api/v1/support/users/{$userId}");
            if ($user) {
                echo Colors::CYAN . "👤 User Support Details" . Colors::NC . "\n";
                echo "===============\n";
                echo "ID: " . $user['id'] . "\n";
                echo "Email: " . $user['email'] . "\n";
                echo "Status: " . $user['id'] . "\n";
                echo "Last Login: " . $user['last_login'] . "\n";
                echo "Support Level: " . $user['support_level'] . "\n";
            }
        }
    }

    private function supportLogs($args) {
        $logs = $this->apiRequest('GET', '/api/v1/support/logs');
        if ($logs && isset($logs['data'])) {
            echo Colors::CYAN . "📝 Support Logs" . Colors::NC . "\n";
                echo "==============\n";
            foreach ($logs['data'] as $log) {
                echo sprintf("[%s] %s: %s\n",
                    $log['timestamp'], $log['level'], $log['message']);
            }
        }
    }

    // ============================================================================
    // HELPER METHODS
    // ============================================================================

    private function importSchema($schemaFile) {
        // This would typically connect to the database directly
        // For now, we'll simulate the import
        echo "   Importing schema from: " . basename($schemaFile) . "\n";
        sleep(1); // Simulate import time
        echo "   ✅ Schema imported successfully\n";
    }

    private function createTable($tableName) {
        // This would typically create tables in the database
        // For now, we'll simulate the creation
        echo "   Creating table: {$tableName}\n";
        sleep(1); // Simulate creation time
        echo "   ✅ Table created successfully\n";
    }

    // ============================================================================
    // API KEYS MANAGEMENT
    // ============================================================================

    private function commandApiKeys($args) {
        if (empty($args)) {
            $this->showKeysHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'list':
                $this->listApiKeys();
                break;
            case 'create':
                $this->createApiKey($args);
                break;
            case 'revoke':
                if (empty($args)) {
                    echo Colors::RED . "❌ Key ID required. Usage: purrr keys revoke <key_id>" . Colors::NC . "\n";
                    return;
                }
                $this->revokeApiKey($args[0]);
                break;
            case 'set':
                if (count($args) < 2) {
                    echo Colors::RED . "❌ Usage: purrr keys set <type> <key_value>" . Colors::NC . "\n";
                    echo "   Types: admin, database, system, support\n";
                    return;
                }
                $this->setKey($args[0], $args[1]);
                break;
            case 'show':
                $this->showCurrentKeys();
                break;
            case 'help':
            default:
                $this->showKeysHelp();
                break;
        }
    }

    private function showKeysHelp() {
        echo Colors::CYAN . "🔑 API Keys Management:" . Colors::NC . "\n";
        echo "  list                    - List your API keys\n";
        echo "  create <name> [scopes]  - Create new API key\n";
        echo "  revoke <key_id>         - Revoke API key\n";
        echo "  set <type> <key>        - Set special key (admin/database/system/support)\n";
        echo "  show                    - Show current special keys\n";
        echo "  help                    - Show this help message\n\n";
        echo "Special Key Types:\n";
        echo "  admin                   - Administrative operations\n";
        echo "  database                - Database operations\n";
        echo "  system                  - System management\n";
        echo "  support                 - Support operations\n\n";
    }

    private function listApiKeys() {
        try {
            $response = $this->apiRequest('GET', '/api/v1/keys');
            if ($response && isset($response['data'])) {
                echo Colors::CYAN . "🔑 Your API Keys:" . Colors::NC . "\n";
                echo "==================\n";
                foreach ($response['data'] as $key) {
                    echo sprintf("ID: %d | Name: %s | Scopes: %s | Status: %s\n",
                        $key['id'], $key['name'], implode(',', $key['scopes']), $key['status']);
                }
            } else {
                echo Colors::YELLOW . "⚠️  No API keys found or not authenticated" . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to list API keys: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function createApiKey($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ Key name required. Usage: purrr keys create <name> [scopes]" . Colors::NC . "\n";
            return;
        }

        $name = $args[0];
        $scopes = array_slice($args, 1);
        if (empty($scopes)) {
            $scopes = ['read', 'write'];
        }

        try {
            $response = $this->apiRequest('POST', '/api/v1/keys', [
                'name' => $name,
                'scopes' => $scopes
            ]);

            if ($response && isset($response['data'])) {
                echo Colors::GREEN . "✅ API key created successfully!" . Colors::NC . "\n";
                echo "Key ID: " . $response['data']['id'] . "\n";
                echo "Name: " . $response['data']['name'] . "\n";
                echo "Scopes: " . implode(', ', $response['data']['scopes']) . "\n";
                echo Colors::YELLOW . "⚠️  Store this key securely - it won't be shown again!" . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to create API key: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function revokeApiKey($keyId) {
        try {
            $response = $this->apiRequest('DELETE', "/api/v1/keys/{$keyId}");
            echo Colors::GREEN . "✅ API key revoked successfully!" . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to revoke API key: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function setKey($type, $keyValue) {
        $validTypes = ['admin', 'database', 'system', 'support'];
        
        if (!in_array($type, $validTypes)) {
            echo Colors::RED . "❌ Invalid key type: {$type}" . Colors::NC . "\n";
            echo "Valid types: " . implode(', ', $validTypes) . "\n";
            return;
        }

        $configKey = $type . '_key';
        $this->config[$configKey] = $keyValue;
        $this->saveConfig();

        echo Colors::GREEN . "✅ {$type} key set successfully!" . Colors::NC . "\n";
        echo Colors::YELLOW . "⚠️  Key stored in local configuration" . Colors::NC . "\n";
    }

    private function showCurrentKeys() {
        echo Colors::CYAN . "🔑 Current Special Keys:" . Colors::NC . "\n";
        echo "==========================\n";
        echo "Admin Key: " . ($this->hasAdminKey() ? "✅ Set" : "❌ Not set") . "\n";
        echo "Database Key: " . ($this->hasDatabaseKey() ? "✅ Set" : "❌ Not set") . "\n";
        echo "System Key: " . ($this->hasSystemKey() ? "✅ Set" : "❌ Not set") . "\n";
        echo "Support Key: " . ($this->hasSupportKey() ? "✅ Set" : "❌ Not set") . "\n";
    }

    private function commandLogin($args) {
        if ($this->accessToken) {
            echo Colors::YELLOW . "⚠️  Already logged in. Use 'purrr logout' to log out first." . Colors::NC . "\n";
            return;
        }

        echo Colors::CYAN . "🐱 Welcome to Purrr.love CLI!" . Colors::NC . "\n";
        echo "Please enter your credentials:\n\n";

        echo "Username: ";
        $username = trim(fgets(STDIN));
        
        echo "Password: ";
        system('stty -echo');
        $password = trim(fgets(STDIN));
        system('stty echo');
        echo "\n";

        try {
            $response = $this->apiRequest('POST', '/oauth/token', [
                'grant_type' => 'password',
                'username' => $username,
                'password' => $password,
                'client_id' => 'cli',
                'client_secret' => 'cli_secret'
            ]);

            if (isset($response['access_token'])) {
                $this->config['access_token'] = $response['access_token'];
                $this->config['user_id'] = $this->getUserIdFromToken($response['access_token']);
                $this->accessToken = $response['access_token'];
                $this->saveConfig();
                
                echo Colors::GREEN . "✅ Login successful!" . Colors::NC . "\n";
                echo "Welcome back, $username! 🐾\n";
            } else {
                echo Colors::RED . "❌ Login failed: Invalid response" . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Login failed: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function commandLogout($args) {
        $this->config['access_token'] = null;
        $this->config['user_id'] = null;
        $this->accessToken = null;
        $this->saveConfig();
        
        echo Colors::GREEN . "✅ Logged out successfully!" . Colors::NC . "\n";
    }

    private function commandCats($args) {
        if (empty($args)) {
            $this->showCatsHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'list':
                $this->listCats();
                break;
            case 'get':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getCat($args[0]);
                break;
            case 'create':
                $this->createCat($args);
                break;
            case 'update':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->updateCat($args[0], array_slice($args, 1));
                break;
            case 'delete':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->deleteCat($args[0]);
                break;
            case 'stats':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getCatStats($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown cats command: $action" . Colors::NC . "\n";
                $this->showCatsHelp();
                break;
        }
    }

    private function commandGames($args) {
        if (empty($args)) {
            $this->showGamesHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'play':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID and game type" . Colors::NC . "\n";
                    return;
                }
                $this->playGame($args[0], $args[1] ?? 'laser_pointer', $args[2] ?? 10);
                break;
            case 'train':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID and command" . Colors::NC . "\n";
                    return;
                }
                $this->trainCat($args[0], $args[1], $args[2] ?? 'normal');
                break;
            case 'care':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID and care type" . Colors::NC . "\n";
                    return;
                }
                $this->careForCat($args[0], $args[1]);
                break;
            case 'leaderboard':
                $this->showLeaderboard($args[0] ?? 'overall');
                break;
            default:
                echo Colors::RED . "❌ Unknown games command: $action" . Colors::NC . "\n";
                $this->showGamesHelp();
                break;
        }
    }

    private function commandVR($args) {
        if (empty($args)) {
            $this->showVRHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'start':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->startVRSession($args[0], $args[1] ?? 'webvr');
                break;
            case 'interact':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify session ID, interaction type, and options" . Colors::NC . "\n";
                    return;
                }
                $this->vrInteract($args[0], $args[1], array_slice($args, 2));
                break;
            case 'sessions':
                $this->listVRSessions();
                break;
            default:
                echo Colors::RED . "❌ Unknown VR command: $action" . Colors::NC . "\n";
                $this->showVRHelp();
                break;
        }
    }

    private function commandAI($args) {
        if (empty($args)) {
            $this->showAIHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'insights':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getAIInsights($args[0]);
                break;
            case 'patterns':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getBehaviorPatterns($args[0]);
                break;
            case 'recommendations':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getAIRecommendations($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown AI command: $action" . Colors::NC . "\n";
                $this->showAIHelp();
                break;
        }
    }

    private function commandTrading($args) {
        if (empty($args)) {
            $this->showTradingHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'list':
                $this->listTradingOffers($args);
                break;
            case 'create':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify cat ID, price, and description" . Colors::NC . "\n";
                    return;
                }
                $this->createTradingOffer($args[0], $args[1], $args[2]);
                break;
            case 'accept':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify an offer ID" . Colors::NC . "\n";
                    return;
                }
                $this->acceptTradingOffer($args[0]);
                break;
            case 'cancel':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify an offer ID" . Colors::NC . "\n";
                    return;
                }
                $this->cancelTradingOffer($args[0]);
                break;
            case 'history':
                $this->showTradingHistory();
                break;
            default:
                echo Colors::RED . "❌ Unknown trading command: $action" . Colors::NC . "\n";
                $this->showTradingHelp();
                break;
        }
    }

    private function commandShows($args) {
        if (empty($args)) {
            $this->showShowsHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'list':
                $this->listCatShows($args);
                break;
            case 'register':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify cat ID, show ID, and categories" . Colors::NC . "\n";
                    return;
                }
                $this->registerForShow($args[0], $args[1], array_slice($args, 2));
                break;
            case 'participants':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a show ID" . Colors::NC . "\n";
                    return;
                }
                $this->showParticipants($args[0]);
                break;
            case 'results':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a show ID" . Colors::NC . "\n";
                    return;
                }
                $this->showResults($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown shows command: $action" . Colors::NC . "\n";
                $this->showShowsHelp();
                break;
        }
    }

    private function commandMultiplayer($args) {
        if (empty($args)) {
            $this->showMultiplayerHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'join':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID and room type" . Colors::NC . "\n";
                    return;
                }
                $this->joinMultiplayerRoom($args[0], $args[1] ?? 'playground');
                break;
            case 'action':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify session ID, action type, and options" . Colors::NC . "\n";
                    return;
                }
                $this->multiplayerAction($args[0], $args[1], array_slice($args, 2));
                break;
            case 'rooms':
                $this->listMultiplayerRooms();
                break;
            case 'status':
                $this->showMultiplayerStatus();
                break;
            default:
                echo Colors::RED . "❌ Unknown multiplayer command: $action" . Colors::NC . "\n";
                $this->showMultiplayerHelp();
                break;
        }
    }

    private function commandHealth($args) {
        if (empty($args)) {
            $this->showHealthHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'summary':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getHealthSummary($args[0], $args[1] ?? '7d');
                break;
            case 'register':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify cat ID, device type, and device name" . Colors::NC . "\n";
                    return;
                }
                $this->registerHealthDevice($args[0], $args[1], $args[2]);
                break;
            case 'devices':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->listHealthDevices($args[0]);
                break;
            case 'alerts':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getHealthAlerts($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown health command: $action" . Colors::NC . "\n";
                $this->showHealthHelp();
                break;
        }
    }

    private function commandAnalytics($args) {
        if (empty($args)) {
            $this->showAnalyticsHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'cat':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getCatAnalytics($args[0], $args[1] ?? '30d');
                break;
            case 'user':
                $this->getUserAnalytics();
                break;
            case 'trends':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getTrends($args[0], $args[1] ?? '7d');
                break;
            default:
                echo Colors::RED . "❌ Unknown analytics command: $action" . Colors::NC . "\n";
                $this->showAnalyticsHelp();
                break;
        }
    }

    private function commandSpecial($args) {
        if (empty($args)) {
            $this->showSpecialHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'list':
                $this->listSpecialCats();
                break;
            case 'progress':
                $this->showSpecialCatProgress();
                break;
            case 'unlock':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a special cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->unlockSpecialCat($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown special command: $action" . Colors::NC . "\n";
                $this->showSpecialHelp();
                break;
        }
    }

    private function commandNightWatch($args) {
        if (empty($args)) {
            $this->showNightWatchHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'deploy':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify cat IDs to deploy" . Colors::NC . "\n";
                    return;
                }
                $this->deployNightPatrol($args);
                break;
            case 'status':
                $this->showNightWatchStatus();
                break;
            case 'zones':
                $this->listProtectionZones();
                break;
            case 'create-zone':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Usage: nightwatch create-zone <type> <name> <location> [radius]" . Colors::NC . "\n";
                    return;
                }
                $this->createProtectionZone($args);
                break;
            case 'stats':
                $this->showNightWatchStats();
                break;
            default:
                echo Colors::RED . "❌ Unknown night watch command: $action" . Colors::NC . "\n";
                $this->showNightWatchHelp();
                break;
        }
    }

    private function deployNightPatrol($args) {
        $catIds = $args;
        $patrolArea = 'neighborhood';
        
        try {
            $response = $this->apiRequest('POST', '/api/v1/night-watch/deploy', [
                'cat_ids' => $catIds,
                'patrol_area' => $patrolArea
            ]);
            
            if (isset($response['success']) && $response['success']) {
                echo Colors::GREEN . "🌙 " . $response['message'] . Colors::NC . "\n";
                echo "  Patrol ID: " . $response['patrol_id'] . "\n";
                echo "  Cats Deployed: " . count($response['deployed_cats']) . "\n";
                
                foreach ($response['deployed_cats'] as $cat) {
                    $roleColor = $this->getRoleColor($cat['role']);
                    echo "    " . $roleColor . $cat['cat_id'] . " (" . $cat['role'] . ")" . Colors::NC . "\n";
                }
            } else {
                echo Colors::RED . "❌ Failed to deploy patrol: " . ($response['message'] ?? 'Unknown error') . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to deploy patrol: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showNightWatchStatus() {
        try {
            $response = $this->apiRequest('GET', '/api/v1/night-watch/status');
            
            if (isset($response['data'])) {
                $status = $response['data'];
                echo Colors::GREEN . "🌙 Night Watch Status:" . Colors::NC . "\n";
                echo "  Protection Level: " . $status['protection_level'] . "\n";
                echo "  Active Patrols: " . $status['active_patrols'] . "\n";
                echo "  Protection Zones: " . $status['protection_zones'] . "\n";
                echo "  Cats Saved: " . $status['total_cats_saved'] . "\n";
                echo "  Bobcat Encounters: " . $status['total_bobcat_encounters'] . "\n";
                echo "  Community Reputation: " . $status['community_reputation'] . "\n";
                
                if (isset($status['is_night_time']) && $status['is_night_time']) {
                    echo Colors::GREEN . "  🌙 Night Watch is ACTIVE" . Colors::NC . "\n";
                } else {
                    echo Colors::YELLOW . "  ☀️ Night Watch is INACTIVE (daytime)" . Colors::NC . "\n";
                }
            } else {
                echo Colors::YELLOW . "📝 No night watch status found." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch night watch status: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function listProtectionZones() {
        try {
            $response = $this->apiRequest('GET', '/api/v1/night-watch/zones');
            
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "🛡️ Protection Zones:" . Colors::NC . "\n";
                foreach ($response['data'] as $zone) {
                    echo "  " . Colors::BLUE . $zone['name'] . Colors::NC . " (" . $zone['zone_type'] . ")\n";
                    echo "    📍 " . $zone['location'] . "\n";
                    echo "    🛡️ " . round($zone['protection_level'] * 100) . "% protection\n";
                    echo "    📏 Radius: " . $zone['radius'] . "m\n";
                    echo "\n";
                }
            } else {
                echo Colors::YELLOW . "📝 No protection zones found." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch protection zones: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function createProtectionZone($args) {
        $zoneType = $args[0];
        $zoneName = $args[1];
        $zoneLocation = $args[2];
        $zoneRadius = isset($args[3]) ? (int)$args[3] : 50;
        
        try {
            $response = $this->apiRequest('POST', '/api/v1/night-watch/zones', [
                'zone_type' => $zoneType,
                'name' => $zoneName,
                'location' => $zoneLocation,
                'radius' => $zoneRadius
            ]);
            
            if (isset($response['success']) && $response['success']) {
                echo Colors::GREEN . "🛡️ " . $response['message'] . Colors::NC . "\n";
                echo "  Zone ID: " . $response['zone_id'] . "\n";
            } else {
                echo Colors::RED . "❌ Failed to create protection zone: " . ($response['message'] ?? 'Unknown error') . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to create protection zone: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showNightWatchStats() {
        try {
            $response = $this->apiRequest('GET', '/api/v1/night-watch/stats');
            
            if (isset($response['data'])) {
                $stats = $response['data'];
                echo Colors::GREEN . "🌙 Night Watch Statistics:" . Colors::NC . "\n";
                echo "  Total Patrols: " . $stats['total_patrols'] . "\n";
                echo "  Active Patrols: " . $stats['active_patrols'] . "\n";
                echo "  Protection Zones: " . $stats['protection_zones'] . "\n";
                echo "  Achievements Unlocked: " . $stats['achievements_unlocked'] . "\n";
                echo "  Total Score: " . $stats['total_score'] ?? 'N/A' . "\n";
            } else {
                echo Colors::YELLOW . "📝 No night watch statistics found." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch night watch statistics: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getRoleColor($role) {
        switch ($role) {
            case 'guardian':
                return Colors::RED;
            case 'scout':
                return Colors::BLUE;
            case 'healer':
                return Colors::GREEN;
            case 'alarm':
                return Colors::YELLOW;
            default:
                return Colors::WHITE;
        }
    }

    private function showNightWatchHelp() {
        echo "🌙 Night Watch Commands:\n";
        echo "  deploy <cat_id1> [cat_id2] ... - Deploy cats for night patrol\n";
        echo "  status                        - Show night watch status\n";
        echo "  zones                         - List protection zones\n";
        echo "  create-zone <type> <name> <location> [radius] - Create protection zone\n";
        echo "  stats                         - Show night watch statistics\n";
        echo "\n";
        echo "Zone Types:\n";
        echo "  cat_condo     - Elevated shelter (500 coins)\n";
        echo "  motion_sensor - Bobcat detection (200 coins)\n";
        echo "  safe_haven    - Emergency shelter (300 coins)\n";
        echo "  community_alert - Alert system (150 coins)\n";
    }

    private function commandConfig($args) {
        if (empty($args)) {
            $this->showConfig();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'set':
                if (count($args) < 2) {
                    echo Colors::RED . "❌ Please specify key and value" . Colors::NC . "\n";
                    return;
                }
                $this->setConfig($args[0], $args[1]);
                break;
            case 'get':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a key" . Colors::NC . "\n";
                    return;
                }
                $this->getConfig($args[0]);
                break;
            case 'reset':
                $this->resetConfig();
                break;
            default:
                echo Colors::RED . "❌ Unknown config command: $action" . Colors::NC . "\n";
                echo "Use: config [set|get|reset] [key] [value]\n";
                break;
        }
    }

    private function commandVersion($args) {
        echo Colors::CYAN . "🐱 Purrr.love CLI v" . CLI_VERSION . Colors::NC . "\n";
        echo "The Ultimate Cat Gaming Platform\n";
    }

    // Helper methods for commands...
    private function listCats() {
        try {
            $response = $this->apiRequest('GET', '/api/v1/cats');
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "🐱 Your Cats:" . Colors::NC . "\n";
                foreach ($response['data'] as $cat) {
                    echo "  ID: {$cat['id']} | {$cat['name']} | Level {$cat['level']} | {$cat['breed']}\n";
                    echo "     Health: {$cat['health']}% | Happiness: {$cat['happiness']}% | Energy: {$cat['energy']}%\n";
                }
            } else {
                echo Colors::YELLOW . "📝 No cats found. Create one with 'purrr cats create'!" . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch cats: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getCat($catId) {
        try {
            $response = $this->apiRequest('GET', "/api/v1/cats/$catId");
            if (isset($response['data'])) {
                $cat = $response['data'];
                echo Colors::GREEN . "🐱 Cat Details:" . Colors::NC . "\n";
                echo "  Name: {$cat['name']}\n";
                echo "  Breed: {$cat['breed']}\n";
                echo "  Personality: {$cat['personality_type']}\n";
                echo "  Mood: {$cat['mood']}\n";
                echo "  Level: {$cat['level']}\n";
                echo "  Experience: {$cat['experience']}\n";
                echo "  Health: {$cat['health']}%\n";
                echo "  Hunger: {$cat['hunger']}%\n";
                echo "  Happiness: {$cat['happiness']}%\n";
                echo "  Energy: {$cat['energy']}%\n";
                echo "  Age: {$cat['age_days']} days\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch cat: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function createCat($args) {
        if (count($args) < 3) {
            echo Colors::RED . "❌ Please specify: name species personality_type [breed]" . Colors::NC . "\n";
            return;
        }

        $catData = [
            'name' => $args[0],
            'species' => $args[1],
            'personality_type' => $args[2],
            'breed' => $args[3] ?? 'mixed'
        ];

        try {
            $response = $this->apiRequest('POST', '/api/v1/cats', $catData);
            if (isset($response['data'])) {
                echo Colors::GREEN . "✅ Cat created successfully!" . Colors::NC . "\n";
                echo "  ID: {$response['data']['id']}\n";
                echo "  Name: {$response['data']['name']}\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to create cat: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function playGame($catId, $gameType, $duration) {
        try {
            $response = $this->apiRequest('POST', "/api/v1/cats/$catId/play", [
                'game_type' => $gameType,
                'duration' => $duration
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🎮 Game completed!" . Colors::NC . "\n";
                echo "  Game: $gameType\n";
                echo "  Duration: {$duration} minutes\n";
                echo "  Experience gained: {$response['data']['experience_gained']}\n";
                echo "  Happiness increase: {$response['data']['happiness_increase']}\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to play game: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function startVRSession($catId, $vrDevice) {
        try {
            $response = $this->apiRequest('POST', "/api/v1/cats/$catId/vr_interaction", [
                'vr_device' => $vrDevice
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🥽 VR session started!" . Colors::NC . "\n";
                echo "  Session ID: {$response['data']['session_id']}\n";
                echo "  Device: $vrDevice\n";
                echo "  Status: {$response['data']['status']}\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to start VR session: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getAIInsights($catId) {
        try {
            $response = $this->apiRequest('GET', "/api/v1/cats/$catId/ai_learning");
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🤖 AI Learning Insights:" . Colors::NC . "\n";
                echo "  Learning Progress: {$response['data']['learning_progress']}%\n";
                echo "  Behavior Patterns: " . count($response['data']['behavior_patterns']) . "\n";
                echo "  Learning Goals: " . count($response['data']['learning_goals']) . "\n";
                
                if (!empty($response['data']['recommendations'])) {
                    echo "  Recommendations:\n";
                    foreach ($response['data']['recommendations'] as $rec) {
                        echo "    • {$rec['title']}: {$rec['description']}\n";
                    }
                }
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to get AI insights: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function listTradingOffers($args) {
        $filters = [];
        if (!empty($args)) {
            $filters['breed'] = $args[0];
        }

        try {
            $response = $this->apiRequest('GET', '/api/v1/trading/offers', $filters);
            
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "🔄 Trading Offers:" . Colors::NC . "\n";
                foreach ($response['data'] as $offer) {
                    echo "  ID: {$offer['id']} | \${$offer['price']} | {$offer['description']}\n";
                    if (isset($offer['cat_details'])) {
                        echo "     Cat: {$offer['cat_details']['name']} ({$offer['cat_details']['breed']})\n";
                    }
                }
            } else {
                echo Colors::YELLOW . "📝 No trading offers found." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch trading offers: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function listCatShows($args) {
        $filters = [];
        if (!empty($args)) {
            $filters['status'] = $args[0];
        }

        try {
            $response = $this->apiRequest('GET', '/api/v1/shows', $filters);
            
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "👑 Cat Shows:" . Colors::NC . "\n";
                foreach ($response['data'] as $show) {
                    echo "  ID: {$show['id']} | {$show['name']}\n";
                    echo "     Date: {$show['start_date']} | Categories: " . implode(', ', $show['categories']) . "\n";
                    echo "     Entry Fee: \${$show['entry_fee']} | Location: {$show['location']}\n";
                }
            } else {
                echo Colors::YELLOW . "📝 No cat shows found." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch cat shows: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function joinMultiplayerRoom($catId, $roomType) {
        try {
            $response = $this->apiRequest('POST', '/api/v1/multiplayer/join', [
                'cat_id' => $catId,
                'room_type' => $roomType
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🌐 Joined multiplayer room!" . Colors::NC . "\n";
                echo "  Session ID: {$response['data']['session_id']}\n";
                echo "  Room Type: $roomType\n";
                echo "  Participants: " . count($response['data']['participants']) . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to join multiplayer room: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getHealthSummary($catId, $timeframe) {
        try {
            $response = $this->apiRequest('GET', "/api/v1/cats/$catId/health", [
                'timeframe' => $timeframe
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🏥 Health Summary:" . Colors::NC . "\n";
                echo "  Overall Score: {$response['data']['overall_score']}%\n";
                echo "  Heart Rate: {$response['data']['heart_rate']} BPM\n";
                echo "  Temperature: {$response['data']['temperature']}°F\n";
                echo "  Activity Level: {$response['data']['activity_level']}\n";
                
                if (!empty($response['data']['alerts'])) {
                    echo "  Alerts:\n";
                    foreach ($response['data']['alerts'] as $alert) {
                        echo "    • {$alert['type']}: {$alert['message']}\n";
                    }
                }
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to get health summary: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getCatAnalytics($catId, $timeframe) {
        try {
            $response = $this->apiRequest('GET', "/api/v1/cats/$catId/analytics", [
                'timeframe' => $timeframe
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "📊 Cat Analytics:" . Colors::NC . "\n";
                echo "  Timeframe: $timeframe\n";
                echo "  Games Played: {$response['data']['games_played']}\n";
                echo "  Training Sessions: {$response['data']['training_sessions']}\n";
                echo "  Care Sessions: {$response['data']['care_sessions']}\n";
                echo "  Experience Growth: {$response['data']['experience_growth']}%\n";
                echo "  Happiness Trend: {$response['data']['happiness_trend']}\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to get cat analytics: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function listSpecialCats() {
        try {
            $response = $this->apiRequest('GET', '/api/v1/special-cats');
            
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "🌟 Available Special Cats:" . Colors::NC . "\n";
                foreach ($response['data'] as $cat) {
                    $rarityColor = $this->getRarityColor($cat['rarity']);
                    echo "  {$rarityColor}{$cat['name']} ({$cat['rarity']})" . Colors::NC . "\n";
                    echo "     {$cat['description']}\n";
                    echo "     Unlock: {$cat['unlock_conditions']['description']}\n\n";
                }
            } else {
                echo Colors::YELLOW . "📝 No special cats available." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch special cats: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showSpecialCatProgress() {
        try {
            $response = $this->apiRequest('GET', '/api/v1/special-cats/progress');
            
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "🌟 Special Cat Unlock Progress:" . Colors::NC . "\n";
                foreach ($response['data'] as $catId => $progress) {
                    $rarityColor = $this->getRarityColor($progress['rarity']);
                    $status = $progress['unlocked'] ? Colors::GREEN . "✅ UNLOCKED" . Colors::NC : Colors::RED . "🔒 LOCKED" . Colors::NC;
                    
                    echo "  {$rarityColor}{$progress['name']} ({$progress['rarity']})" . Colors::NC . " - {$status}\n";
                    
                    if (!$progress['unlocked']) {
                        echo "     Requirements: {$progress['conditions']['description']}\n";
                        if (isset($progress['progress']['percentage'])) {
                            $percentage = $progress['progress']['percentage'];
                            $bar = $this->createProgressBar($percentage);
                            echo "     Progress: {$bar} {$percentage}%\n";
                        }
                    } else {
                        echo "     Special abilities unlocked!\n";
                    }
                    echo "\n";
                }
            } else {
                echo Colors::YELLOW . "📝 No special cat progress found." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch special cat progress: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function unlockSpecialCat($catId) {
        try {
            $response = $this->apiRequest('POST', "/api/v1/special-cats/$catId/unlock");
            
            if (isset($response['success']) && $response['success']) {
                echo Colors::GREEN . "🎉 {$response['message']}" . Colors::NC . "\n";
                echo "  Cat ID: {$response['cat_id']}\n";
                echo "  Name: {$response['cat_name']}\n";
            } else {
                echo Colors::RED . "❌ Failed to unlock special cat: " . ($response['message'] ?? 'Unknown error') . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to unlock special cat: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getRarityColor($rarity) {
        switch ($rarity) {
            case 'legendary':
                return Colors::YELLOW;
            case 'epic':
                return Colors::MAGENTA;
            case 'rare':
                return Colors::BLUE;
            default:
                return Colors::WHITE;
        }
    }

    private function createProgressBar($percentage) {
        $width = 20;
        $filled = intval(($percentage / 100) * $width);
        $empty = $width - $filled;
        
        $bar = str_repeat('█', $filled) . str_repeat('░', $empty);
        return $bar;
    }

    // Help methods...
    private function showCatsHelp() {
        echo "🐱 Cat Commands:\n";
        echo "  list                    - List all your cats\n";
        echo "  get <id>                - Get details for a specific cat\n";
        echo "  create <name> <species> <personality> [breed] - Create a new cat\n";
        echo "  update <id> [field] [value] - Update cat information\n";
        echo "  delete <id>             - Delete a cat\n";
        echo "  stats <id>              - Show cat statistics\n";
    }

    private function showGamesHelp() {
        echo "🎮 Game Commands:\n";
        echo "  play <cat_id> <game_type> [duration] - Play a game with a cat\n";
        echo "  train <cat_id> <command> [difficulty] - Train a cat\n";
        echo "  care <cat_id> <care_type> - Care for a cat\n";
        echo "  leaderboard [category]   - Show game leaderboard\n";
    }

    private function showVRHelp() {
        echo "🥽 VR Commands:\n";
        echo "  start <cat_id> [device] - Start a VR session\n";
        echo "  interact <session_id> <type> [options] - Perform VR interaction\n";
        echo "  sessions                - List active VR sessions\n";
    }

    private function showAIHelp() {
        echo "🤖 AI Commands:\n";
        echo "  insights <cat_id>       - Get AI learning insights\n";
        echo "  patterns <cat_id>       - Show behavior patterns\n";
        echo "  recommendations <cat_id> - Get AI recommendations\n";
    }

    private function showTradingHelp() {
        echo "🔄 Trading Commands:\n";
        echo "  list [breed]            - List trading offers\n";
        echo "  create <cat_id> <price> <description> - Create trading offer\n";
        echo "  accept <offer_id>       - Accept a trading offer\n";
        echo "  cancel <offer_id>       - Cancel your trading offer\n";
        echo "  history                 - Show trading history\n";
    }

    private function showShowsHelp() {
        echo "👑 Show Commands:\n";
        echo "  list [status]           - List cat shows\n";
        echo "  register <cat_id> <show_id> <categories> - Register for a show\n";
        echo "  participants <show_id>  - Show participants\n";
        echo "  results <show_id>       - Show results\n";
    }

    private function showMultiplayerHelp() {
        echo "🌐 Multiplayer Commands:\n";
        echo "  join <cat_id> <room_type> - Join multiplayer room\n";
        echo "  action <session_id> <action> [options] - Perform action\n";
        echo "  rooms                   - List available rooms\n";
        echo "  status                  - Show multiplayer status\n";
    }

    private function showHealthHelp() {
        echo "🏥 Health Commands:\n";
        echo "  summary <cat_id> [timeframe] - Get health summary\n";
        echo "  register <cat_id> <type> <name> - Register health device\n";
        echo "  devices <cat_id>        - List health devices\n";
        echo "  alerts <cat_id>         - Show health alerts\n";
    }

    private function showAnalyticsHelp() {
        echo "📊 Analytics Commands:\n";
        echo "  cat <cat_id> [timeframe] - Get cat analytics\n";
        echo "  user                    - Get user analytics\n";
        echo "  trends <cat_id> [timeframe] - Get trends\n";
    }

    private function showSpecialHelp() {
        echo "🌟 Special Cats Commands:\n";
        echo "  list                    - List all available special cats\n";
        echo "  progress                - Show your unlock progress\n";
        echo "  unlock <cat_id>         - Attempt to unlock a special cat\n";
    }

    private function showHelp() {
        echo Colors::CYAN . "🐱 Purrr.love CLI v" . CLI_VERSION . Colors::NC . "\n";
        echo "The Ultimate Cat Gaming Platform Command Line Interface\n\n";
        
        echo Colors::GREEN . "Available Commands:" . Colors::NC . "\n";
        echo "  login                   - Authenticate with Purrr.love\n";
        echo "  logout                  - Log out and clear credentials\n";
        echo "  cats                    - Manage your cats\n";
        echo "  games                   - Play games and activities\n";
        echo "  breeding                - Cat breeding and genetics\n";
        echo "  quests                  - Quests and achievements\n";
        echo "  store                   - Cat store and items\n";
        echo "  keys                    - Manage API keys\n";
        echo "  vr                      - VR cat interactions\n";
        echo "  ai                      - AI behavior learning\n";
        echo "  trading                 - Cross-platform cat trading\n";
        echo "  shows                   - Cat show competitions\n";
        echo "  multiplayer             - Real-time multiplayer\n";
        echo "  health                  - Health monitoring\n";
        echo "  analytics               - Analytics and insights\n";
        echo "  special                 - Manage special cats\n";
        echo "  nightwatch              - Night Watch system\n";
        echo "  blockchain/nft          - Blockchain and NFT management\n";
        echo "  ml/personality          - Machine learning personality\n";
        echo "  metaverse/vr            - Metaverse and VR worlds\n";
        echo "  webhooks                - Webhook management\n";
        echo "  lost-pet/finder         - Lost pet finder and Facebook integration\n";
        echo "  admin                   - Administrative operations\n";
        echo "  setup                   - System setup and configuration\n";
        echo "  db                      - Database operations\n";
        echo "  system                  - System management\n";
        echo "  support                 - Support operations\n";
        echo "  config                  - Manage configuration\n";
        echo "  version                 - Show version information\n";
        echo "  help                    - Show this help message\n\n";
        
        echo "For detailed help on any command, use: purrr <command> help\n";
        echo "Example: purrr cats help\n\n";
        
        echo "🐾 Happy cat gaming! 🐾\n";
    }

    /**
     * Blockchain and NFT Management Commands
     */
    private function commandBlockchain($args) {
        if (empty($args)) {
            $this->showBlockchainHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'mint':
                $this->mintNFT($args);
                break;
            case 'transfer':
                $this->transferNFT($args);
                break;
            case 'verify':
                $this->verifyNFTOwnership($args);
                break;
            case 'collection':
                $this->showNFTCollection($args);
                break;
            case 'marketplace':
                $this->showNFTMarketplace($args);
                break;
            case 'stats':
                $this->showBlockchainStats();
                break;
            case 'help':
                $this->showBlockchainHelp();
                break;
            default:
                echo Colors::RED . "❌ Unknown blockchain action: $action" . Colors::NC . "\n";
                echo "Use 'purrr blockchain help' to see available actions.\n";
                break;
        }
    }

    private function showBlockchainHelp() {
        echo Colors::CYAN . "⛓️  Blockchain & NFT Commands:" . Colors::NC . "\n";
        echo "  mint <cat_id> [network] [metadata] - Mint NFT for cat\n";
        echo "  transfer <nft_id> <to_user_id>     - Transfer NFT ownership\n";
        echo "  verify <nft_id>                     - Verify NFT ownership\n";
        echo "  collection [network]                - Show user's NFT collection\n";
        echo "  marketplace [filters]               - Browse NFT marketplace\n";
        echo "  stats                               - Show blockchain statistics\n";
        echo "  help                                - Show this help message\n\n";
    }

    private function mintNFT($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ Cat ID required. Usage: purrr blockchain mint <cat_id> [network] [metadata]" . Colors::NC . "\n";
            return;
        }

        $catId = array_shift($args);
        $network = array_shift($args) ?? 'ethereum';
        $metadata = !empty($args) ? json_decode(implode(' ', $args), true) : [];

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/blockchain?action=mint-nft', [
                'cat_id' => $catId,
                'network' => $network,
                'metadata' => $metadata
            ]);

            echo Colors::GREEN . "✅ NFT minted successfully!" . Colors::NC . "\n";
            echo "Token ID: " . Colors::CYAN . $response['token_id'] . Colors::NC . "\n";
            echo "Network: " . Colors::CYAN . $response['network'] . Colors::NC . "\n";
            echo "Transaction: " . Colors::CYAN . $response['transaction_hash'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to mint NFT: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function transferNFT($args) {
        if (count($args) < 2) {
            echo Colors::RED . "❌ NFT ID and recipient user ID required. Usage: purrr blockchain transfer <nft_id> <to_user_id>" . Colors::NC . "\n";
            return;
        }

        $nftId = array_shift($args);
        $toUserId = array_shift($args);

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/blockchain?action=transfer-nft', [
                'nft_id' => $nftId,
                'to_user_id' => $toUserId
            ]);

            echo Colors::GREEN . "✅ NFT transferred successfully!" . Colors::NC . "\n";
            echo "Transaction: " . Colors::CYAN . $response['transaction_hash'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to transfer NFT: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function verifyNFTOwnership($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ NFT ID required. Usage: purrr blockchain verify <nft_id>" . Colors::NC . "\n";
            return;
        }

        $nftId = array_shift($args);

        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/blockchain?action=verify-ownership&nft_id=' . $nftId);

            echo Colors::GREEN . "✅ NFT ownership verification complete!" . Colors::NC . "\n";
            echo "Verified: " . Colors::CYAN . ($response['verified'] ? 'Yes' : 'No') . Colors::NC . "\n";
            echo "Blockchain Owner: " . Colors::CYAN . $response['blockchain_owner'] . Colors::NC . "\n";
            echo "Database Owner: " . Colors::CYAN . $response['database_owner'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to verify NFT ownership: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showNFTCollection($args) {
        $network = array_shift($args) ?? '';

        try {
            $endpoint = '/v2/advanced_features/blockchain?action=user-collection';
            if ($network) {
                $endpoint .= '&network=' . urlencode($network);
            }

            $response = $this->apiRequest('GET', $endpoint);

            if (empty($response)) {
                echo Colors::YELLOW . "📭 No NFTs found in collection." . Colors::NC . "\n";
                return;
            }

            echo Colors::GREEN . "🏆 NFT Collection (" . count($response) . " items):" . Colors::NC . "\n\n";
            foreach ($response as $nft) {
                echo Colors::CYAN . "Token ID: " . $nft['token_id'] . Colors::NC . "\n";
                echo "  Cat: " . $nft['cat_name'] . " (" . $nft['cat_breed'] . ")\n";
                echo "  Network: " . $nft['network'] . "\n";
                echo "  Contract: " . substr($nft['contract_address'], 0, 20) . "...\n";
                echo "  Created: " . $nft['created_at'] . "\n\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch NFT collection: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showNFTMarketplace($args) {
        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/blockchain?action=marketplace');

            if (empty($response)) {
                echo Colors::YELLOW . "📭 No NFT listings found." . Colors::NC . "\n";
                return;
            }

            echo Colors::GREEN . "🛒 NFT Marketplace (" . count($response) . " listings):" . Colors::NC . "\n\n";
            foreach ($response as $listing) {
                echo Colors::CYAN . "Listing ID: " . $listing['listing_id'] . Colors::NC . "\n";
                echo "  Cat: " . $listing['cat_name'] . " (" . $listing['cat_breed'] . ")\n";
                echo "  Price: " . $listing['price'] . " " . $listing['currency'] . "\n";
                echo "  Seller: " . $listing['seller_name'] . "\n";
                echo "  Network: " . $listing['network'] . "\n";
                echo "  Expires: " . $listing['expires_at'] . "\n\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch marketplace: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showBlockchainStats() {
        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/blockchain?action=stats');

            echo Colors::GREEN . "📊 Blockchain Statistics:" . Colors::NC . "\n";
            echo "  Total NFTs: " . Colors::CYAN . $response['total_nfts'] . Colors::NC . "\n";
            echo "  Active Listings: " . Colors::CYAN . $response['active_listings'] . Colors::NC . "\n";
            echo "  Trading Volume: " . Colors::CYAN . $response['trading_volume'] . Colors::NC . "\n";
            echo "  Total Trades: " . Colors::CYAN . $response['total_trades'] . Colors::NC . "\n\n";

            if (!empty($response['nfts_by_network'])) {
                echo Colors::YELLOW . "NFTs by Network:" . Colors::NC . "\n";
                foreach ($response['nfts_by_network'] as $network => $count) {
                    echo "  $network: $count\n";
                }
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch blockchain stats: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    /**
     * Machine Learning Personality Commands
     */
    private function commandMLPersonality($args) {
        if (empty($args)) {
            $this->showMLPersonalityHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'predict':
                $this->predictPersonality($args);
                break;
            case 'insights':
                $this->showPersonalityInsights($args);
                break;
            case 'observe':
                $this->recordBehaviorObservation($args);
                break;
            case 'genetic':
                $this->updateGeneticData($args);
                break;
            case 'training':
                $this->showTrainingStatus();
                break;
            case 'help':
                $this->showMLPersonalityHelp();
                break;
            default:
                echo Colors::RED . "❌ Unknown ML personality action: $action" . Colors::NC . "\n";
                echo "Use 'purrr ml help' to see available actions.\n";
                break;
        }
    }

    private function showMLPersonalityHelp() {
        echo Colors::CYAN . "🧠 Machine Learning Personality Commands:" . Colors::NC . "\n";
        echo "  predict <cat_id> [confidence]       - Predict cat personality\n";
        echo "  insights <cat_id>                    - Show personality insights\n";
        echo "  observe <cat_id> <type> [details]   - Record behavior observation\n";
        echo "  genetic <cat_id> <data>             - Update genetic data\n";
        echo "  training                             - Show ML training status\n";
        echo "  help                                 - Show this help message\n\n";
    }

    private function predictPersonality($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ Cat ID required. Usage: purrr ml predict <cat_id> [confidence]" . Colors::NC . "\n";
            return;
        }

        $catId = array_shift($args);
        $includeConfidence = !empty($args) ? (array_shift($args) === 'true') : true;

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/ml-personality?action=predict', [
                'cat_id' => $catId,
                'include_confidence' => $includeConfidence
            ]);

            echo Colors::GREEN . "🧠 Personality Prediction Complete!" . Colors::NC . "\n\n";
            
            foreach ($response['personality'] as $dimension => $score) {
                $color = $score >= 70 ? Colors::GREEN : ($score >= 40 ? Colors::YELLOW : Colors::RED);
                echo "$dimension: " . $color . $score . "/100" . Colors::NC . "\n";
            }

            if ($includeConfidence && !empty($response['confidence_scores'])) {
                echo "\n" . Colors::CYAN . "Confidence Scores:" . Colors::NC . "\n";
                foreach ($response['confidence_scores'] as $dimension => $confidence) {
                    echo "$dimension: " . round($confidence * 100, 1) . "%\n";
                }
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to predict personality: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showPersonalityInsights($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ Cat ID required. Usage: purrr ml insights <cat_id>" . Colors::NC . "\n";
            return;
        }

        $catId = array_shift($args);

        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/ml-personality?action=insights&cat_id=' . $catId);

            echo Colors::GREEN . "💡 Personality Insights for Cat $catId:" . Colors::NC . "\n\n";
            
            echo Colors::CYAN . "Overall Assessment:" . Colors::NC . "\n";
            echo $response['overall_assessment'] . "\n\n";

            echo Colors::CYAN . "Dimension Insights:" . Colors::NC . "\n";
            foreach ($response['insights'] as $dimension => $insight) {
                echo Colors::YELLOW . "$dimension:" . Colors::NC . "\n";
                echo "  $insight\n\n";
            }

            echo Colors::CYAN . "Recommendations:" . Colors::NC . "\n";
            foreach ($response['recommendations'] as $dimension => $recommendation) {
                echo Colors::YELLOW . "$dimension:" . Colors::NC . "\n";
                echo "  $recommendation\n\n";
            }

            echo "Confidence Level: " . Colors::CYAN . $response['confidence_level'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch personality insights: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function recordBehaviorObservation($args) {
        if (count($args) < 2) {
            echo Colors::RED . "❌ Cat ID and behavior type required. Usage: purrr ml observe <cat_id> <type> [intensity] [duration] [context]" . Colors::NC . "\n";
            return;
        }

        $catId = array_shift($args);
        $behaviorType = array_shift($args);
        $intensity = array_shift($args) ?? 5;
        $duration = array_shift($args) ?? 0;
        $context = !empty($args) ? implode(' ', $args) : '';

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/ml-personality?action=behavior-observation', [
                'cat_id' => $catId,
                'behavior_type' => $behaviorType,
                'intensity_level' => $intensity,
                'duration_seconds' => $duration,
                'environmental_context' => $context
            ]);

            echo Colors::GREEN . "✅ Behavior observation recorded!" . Colors::NC . "\n";
            echo "Observation ID: " . Colors::CYAN . $response['id'] . Colors::NC . "\n";
            echo "Status: " . Colors::CYAN . $response['status'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to record behavior: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function updateGeneticData($args) {
        if (count($args) < 2) {
            echo Colors::RED . "❌ Cat ID and genetic data required. Usage: purrr ml genetic <cat_id> <heritage_score> [coat_pattern] [markers]" . Colors::NC . "\n";
            return;
        }

        $catId = array_shift($args);
        $heritageScore = array_shift($args);
        $coatPattern = array_shift($args) ?? '';
        $markers = !empty($args) ? implode(' ', $args) : '';

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/ml-personality?action=genetic-data', [
                'cat_id' => $catId,
                'heritage_score' => $heritageScore,
                'coat_pattern' => $coatPattern,
                'genetic_markers' => $markers
            ]);

            echo Colors::GREEN . "✅ Genetic data updated!" . Colors::NC . "\n";
            echo "Update ID: " . Colors::CYAN . $response['id'] . Colors::NC . "\n";
            echo "Status: " . Colors::CYAN . $response['status'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to update genetic data: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showTrainingStatus() {
        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/ml-personality?action=training-status');

            echo Colors::GREEN . "🤖 ML Training Status:" . Colors::NC . "\n";
            echo "  Status: " . Colors::CYAN . $response['status'] . Colors::NC . "\n";
            
            if (!empty($response['models'])) {
                echo "\n" . Colors::YELLOW . "Active Models:" . Colors::NC . "\n";
                foreach ($response['models'] as $model) {
                    echo "  - $model\n";
                }
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch training status: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    /**
     * Metaverse and VR Commands
     */
    private function commandMetaverse($args) {
        if (empty($args)) {
            $this->showMetaverseHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'create':
                $this->createMetaverseWorld($args);
                break;
            case 'join':
                $this->joinMetaverseWorld($args);
                break;
            case 'leave':
                $this->leaveMetaverseWorld($args);
                break;
            case 'worlds':
                $this->listMetaverseWorlds($args);
                break;
            case 'players':
                $this->showWorldPlayers($args);
                break;
            case 'interact':
                $this->performVRInteraction($args);
                break;
            case 'social':
                $this->createSocialVRSpace($args);
                break;
            case 'stats':
                $this->showMetaverseStats();
                break;
            case 'help':
                $this->showMetaverseHelp();
                break;
            default:
                echo Colors::RED . "❌ Unknown metaverse action: $action" . Colors::NC . "\n";
                echo "Use 'purrr metaverse help' to see available actions.\n";
                break;
        }
    }

    private function showMetaverseHelp() {
        echo Colors::CYAN . "🌐 Metaverse & VR Commands:" . Colors::NC . "\n";
        echo "  create <name> <type> [settings]     - Create metaverse world\n";
        echo "  join <world_id> [cat_id]            - Join metaverse world\n";
        echo "  leave <world_id>                     - Leave metaverse world\n";
        echo "  worlds [filters]                     - List active worlds\n";
        echo "  players <world_id>                   - Show world players\n";
        echo "  interact <world_id> <type> [data]   - Perform VR interaction\n";
        echo "  social <world_id> <name> <type>     - Create social VR space\n";
        echo "  stats                                 - Show metaverse statistics\n";
        echo "  help                                  - Show this help message\n\n";
    }

    private function createMetaverseWorld($args) {
        if (count($args) < 2) {
            echo Colors::RED . "❌ World name and type required. Usage: purrr metaverse create <name> <type> [max_players] [access_level]" . Colors::NC . "\n";
            return;
        }

        $worldName = array_shift($args);
        $worldType = array_shift($args);
        $maxPlayers = array_shift($args) ?? 50;
        $accessLevel = array_shift($args) ?? 'public';

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/metaverse?action=create-world', [
                'world_name' => $worldName,
                'world_type' => $worldType,
                'max_players' => $maxPlayers,
                'access_level' => $accessLevel
            ]);

            echo Colors::GREEN . "✅ Metaverse world created!" . Colors::NC . "\n";
            echo "World ID: " . Colors::CYAN . $response['world_id'] . Colors::NC . "\n";
            echo "Name: " . Colors::CYAN . $response['world_name'] . Colors::NC . "\n";
            echo "Type: " . Colors::CYAN . $response['world_type'] . Colors::NC . "\n";
            echo "Max Players: " . Colors::CYAN . $response['max_players'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to create world: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function joinMetaverseWorld($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ World ID required. Usage: purrr metaverse join <world_id> [cat_id]" . Colors::NC . "\n";
            return;
        }

        $worldId = array_shift($args);
        $catId = array_shift($args) ?? null;

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/metaverse?action=join-world', [
                'world_id' => $worldId,
                'cat_id' => $catId
            ]);

            echo Colors::GREEN . "✅ Joined metaverse world!" . Colors::NC . "\n";
            echo "World: " . Colors::CYAN . $response['world_name'] . Colors::NC . "\n";
            echo "Type: " . Colors::CYAN . $response['world_type'] . Colors::NC . "\n";
            echo "Cat: " . Colors::CYAN . $response['cat_id'] . Colors::NC . "\n";
            echo "Players: " . Colors::CYAN . $response['player_count'] . "/" . $response['max_players'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to join world: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function leaveMetaverseWorld($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ World ID required. Usage: purrr metaverse leave <world_id>" . Colors::NC . "\n";
            return;
        }

        $worldId = array_shift($args);

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/metaverse?action=leave-world', [
                'world_id' => $worldId
            ]);

            echo Colors::GREEN . "✅ Left metaverse world!" . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to leave world: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function listMetaverseWorlds($args) {
        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/metaverse?action=active-worlds');

            if (empty($response)) {
                echo Colors::YELLOW . "🌍 No active metaverse worlds found." . Colors::NC . "\n";
                return;
            }

            echo Colors::GREEN . "🌍 Active Metaverse Worlds (" . count($response) . "):" . Colors::NC . "\n\n";
            foreach ($response as $world) {
                echo Colors::CYAN . $world['name'] . Colors::NC . " (" . $world['world_type'] . ")\n";
                echo "  ID: " . $world['world_id'] . "\n";
                echo "  Players: " . $world['current_players'] . "/" . $world['max_players'] . "\n";
                echo "  Environment: " . $world['environment'] . "\n";
                echo "  Difficulty: " . $world['difficulty'] . "\n";
                echo "  Creator: " . $world['creator_name'] . "\n\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch worlds: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showWorldPlayers($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ World ID required. Usage: purrr metaverse players <world_id>" . Colors::NC . "\n";
            return;
        }

        $worldId = array_shift($args);

        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/metaverse?action=world-players&world_id=' . $worldId);

            if (empty($response)) {
                echo Colors::YELLOW . "👥 No players in this world." . Colors::NC . "\n";
                return;
            }

            echo Colors::GREEN . "👥 World Players (" . count($response) . "):" . Colors::NC . "\n\n";
            foreach ($response as $player) {
                echo Colors::CYAN . $player['username'] . Colors::NC . "\n";
                echo "  Cat: " . $player['cat_name'] . " (" . $player['cat_breed'] . ")\n";
                echo "  Status: " . $player['online_status'] . "\n";
                echo "  Joined: " . $player['joined_at'] . "\n\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch players: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function performVRInteraction($args) {
        if (count($args) < 2) {
            echo Colors::RED . "❌ World ID and interaction type required. Usage: purrr metaverse interact <world_id> <type> [data]" . Colors::NC . "\n";
            return;
        }

        $worldId = array_shift($args);
        $interactionType = array_shift($args);
        $interactionData = !empty($args) ? implode(' ', $args) : '';

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/metaverse?action=vr-interaction', [
                'world_id' => $worldId,
                'interaction_type' => $interactionType,
                'target_data' => $interactionData
            ]);

            echo Colors::GREEN . "✅ VR interaction performed!" . Colors::NC . "\n";
            echo "Type: " . Colors::CYAN . $response['interaction_type'] . Colors::NC . "\n";
            echo "Result: " . Colors::CYAN . $response['result'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to perform interaction: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function createSocialVRSpace($args) {
        if (count($args) < 3) {
            echo Colors::RED . "❌ World ID, space name, and type required. Usage: purrr metaverse social <world_id> <name> <type> [capacity]" . Colors::NC . "\n";
            return;
        }

        $worldId = array_shift($args);
        $spaceName = array_shift($args);
        $spaceType = array_shift($args);
        $maxCapacity = array_shift($args) ?? 20;

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/metaverse?action=social-space', [
                'world_id' => $worldId,
                'space_name' => $spaceName,
                'space_type' => $spaceType,
                'max_capacity' => $maxCapacity
            ]);

            echo Colors::GREEN . "✅ Social VR space created!" . Colors::NC . "\n";
            echo "Space ID: " . Colors::CYAN . $response['space_id'] . Colors::NC . "\n";
            echo "Name: " . Colors::CYAN . $response['name'] . Colors::NC . "\n";
            echo "Type: " . Colors::CYAN . $response['space_type'] . Colors::NC . "\n";
            echo "Capacity: " . Colors::CYAN . $response['max_occupants'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to create social space: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showMetaverseStats() {
        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/metaverse?action=stats');

            echo Colors::GREEN . "📊 Metaverse Statistics:" . Colors::NC . "\n";
            echo "  Total Worlds: " . Colors::CYAN . $response['total_worlds'] . Colors::NC . "\n";
            echo "  Players Online: " . Colors::CYAN . $response['players_online'] . Colors::NC . "\n\n";

            if (!empty($response['world_types'])) {
                echo Colors::YELLOW . "World Types:" . Colors::NC . "\n";
                foreach ($response['world_types'] as $type => $count) {
                    echo "  $type: $count\n";
                }
            }

            if (!empty($response['popular_worlds'])) {
                echo "\n" . Colors::YELLOW . "Popular Worlds:" . Colors::NC . "\n";
                foreach ($response['popular_worlds'] as $world) {
                    echo "  " . $world['name'] . ": " . $world['player_count'] . " players\n";
                }
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch metaverse stats: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    /**
     * Webhook Management Commands
     */
    private function commandWebhooks($args) {
        if (empty($args)) {
            $this->showWebhooksHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'create':
                $this->createWebhook($args);
                break;
            case 'list':
                $this->listWebhooks();
                break;
            case 'update':
                $this->updateWebhook($args);
                break;
            case 'delete':
                $this->deleteWebhook($args);
                break;
            case 'test':
                $this->testWebhook($args);
                break;
            case 'logs':
                $this->showWebhookLogs($args);
                break;
            case 'help':
                $this->showWebhooksHelp();
                break;
            default:
                echo Colors::RED . "❌ Unknown webhook action: $action" . Colors::NC . "\n";
                echo "Use 'purrr webhooks help' to see available actions.\n";
                break;
        }
    }

    private function showWebhooksHelp() {
        echo Colors::CYAN . "🔗 Webhook Management Commands:" . Colors::NC . "\n";
        echo "  create <url> <events> [secret]      - Create new webhook\n";
        echo "  list                                  - List user's webhooks\n";
        echo "  update <id> <updates>                - Update webhook\n";
        echo "  delete <id>                           - Delete webhook\n";
        echo "  test <id>                             - Test webhook delivery\n";
        echo "  logs <id> [limit]                    - Show delivery logs\n";
        echo "  help                                  - Show this help message\n\n";
    }

    private function createWebhook($args) {
        if (count($args) < 2) {
            echo Colors::RED . "❌ URL and events required. Usage: purrr webhooks create <url> <events> [secret] [headers]" . Colors::NC . "\n";
            return;
        }

        $url = array_shift($args);
        $events = explode(',', array_shift($args));
        $secret = array_shift($args) ?? '';
        $headers = !empty($args) ? json_decode(implode(' ', $args), true) : [];

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/webhooks?action=create', [
                'webhook_url' => $url,
                'events' => $events,
                'secret_key' => $secret,
                'headers' => $headers
            ]);

            echo Colors::GREEN . "✅ Webhook created!" . Colors::NC . "\n";
            echo "Webhook ID: " . Colors::CYAN . $response['id'] . Colors::NC . "\n";
            echo "URL: " . Colors::CYAN . $response['webhook_url'] . Colors::NC . "\n";
            echo "Events: " . Colors::CYAN . implode(', ', $response['events']) . Colors::NC . "\n";
            echo "Status: " . Colors::CYAN . $response['status'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to create webhook: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function listWebhooks() {
        try {
            $response = $this->apiRequest('GET', '/v2/advanced_features/webhooks?action=list');

            if (empty($response)) {
                echo Colors::YELLOW . "🔗 No webhooks found." . Colors::NC . "\n";
                return;
            }

            echo Colors::GREEN . "🔗 User Webhooks (" . count($response) . "):" . Colors::NC . "\n\n";
            foreach ($response as $webhook) {
                echo Colors::CYAN . "ID: " . $webhook['id'] . Colors::NC . "\n";
                echo "  URL: " . $webhook['webhook_url'] . "\n";
                echo "  Events: " . implode(', ', $webhook['events']) . "\n";
                echo "  Status: " . $webhook['status'] . "\n";
                echo "  Created: " . $webhook['created_at'] . "\n\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch webhooks: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function updateWebhook($args) {
        if (count($args) < 2) {
            echo Colors::RED . "❌ Webhook ID and updates required. Usage: purrr webhooks update <id> <updates>" . Colors::NC . "\n";
            return;
        }

        $webhookId = array_shift($args);
        $updates = json_decode(implode(' ', $args), true);

        if (!$updates) {
            echo Colors::RED . "❌ Invalid updates format. Use JSON format." . Colors::NC . "\n";
            return;
        }

        try {
            $response = $this->apiRequest('PUT', '/v2/advanced_features/webhooks?action=update', [
                'webhook_id' => $webhookId,
                'updates' => $updates
            ]);

            echo Colors::GREEN . "✅ Webhook updated!" . Colors::NC . "\n";
            echo "Webhook ID: " . Colors::CYAN . $response['id'] . Colors::NC . "\n";
            echo "Status: " . Colors::CYAN . $response['status'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to update webhook: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function deleteWebhook($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ Webhook ID required. Usage: purrr webhooks delete <id>" . Colors::NC . "\n";
            return;
        }

        $webhookId = array_shift($args);

        try {
            $response = $this->apiRequest('DELETE', '/v2/advanced_features/webhooks?action=delete', [
                'webhook_id' => $webhookId
            ]);

            echo Colors::GREEN . "✅ Webhook deleted!" . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to delete webhook: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function testWebhook($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ Webhook ID required. Usage: purrr webhooks test <id>" . Colors::NC . "\n";
            return;
        }

        $webhookId = array_shift($args);

        try {
            $response = $this->apiRequest('POST', '/v2/advanced_features/webhooks?action=test', [
                'webhook_id' => $webhookId
            ]);

            echo Colors::GREEN . "✅ Webhook test completed!" . Colors::NC . "\n";
            echo "Status: " . Colors::CYAN . $response['status'] . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to test webhook: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showWebhookLogs($args) {
        $webhookId = array_shift($args) ?? '';
        $limit = array_shift($args) ?? 50;

        try {
            $endpoint = '/v2/advanced_features/webhooks?action=delivery-logs';
            if ($webhookId) {
                $endpoint .= '&webhook_id=' . urlencode($webhookId);
            }
            if ($limit) {
                $endpoint .= '&limit=' . urlencode($limit);
            }

            $response = $this->apiRequest('GET', $endpoint);

            if (empty($response)) {
                echo Colors::YELLOW . "📋 No webhook logs found." . Colors::NC . "\n";
                return;
            }

            echo Colors::GREEN . "📋 Webhook Delivery Logs (" . count($response) . "):" . Colors::NC . "\n\n";
            foreach ($response as $log) {
                echo Colors::CYAN . "Event: " . $log['event_type'] . Colors::NC . "\n";
                echo "  Status: " . $log['delivery_status'] . "\n";
                echo "  Response Code: " . $log['response_code'] . "\n";
                echo "  Delivery Time: " . $log['delivery_time_ms'] . "ms\n";
                echo "  Created: " . $log['created_at'] . "\n\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch webhook logs: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function apiRequest($method, $endpoint, $data = null) {
        $url = $this->apiUrl . $endpoint;
        $headers = [
            'Content-Type: application/json',
            'User-Agent: PurrrCLI/' . CLI_VERSION
        ];

        if ($this->accessToken) {
            $headers[] = 'Authorization: Bearer ' . $this->accessToken;
        } elseif ($this->apiKey) {
            $headers[] = 'X-API-Key: ' . $this->apiKey;
        }

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);

        if ($method === 'POST' || $method === 'PUT') {
            curl_setopt($ch, CURLOPT_POST, true);
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'PUT') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'DELETE') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        }

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        if ($response === false) {
            throw new Exception('Request failed');
        }

        $responseData = json_decode($response, true);
        
        if ($httpCode >= 400) {
            $errorMessage = $responseData['error']['message'] ?? 'Unknown error';
            throw new Exception($errorMessage, $httpCode);
        }

        return $responseData['data'] ?? $responseData;
    }

    private function getUserIdFromToken($token) {
        // Simple token parsing - in production, you'd want proper JWT decoding
        $parts = explode('.', $token);
        if (count($parts) === 3) {
            $payload = json_decode(base64_decode($parts[1]), true);
            return $payload['user_id'] ?? null;
        }
        return null;
    }

    private function setConfig($key, $value) {
        $this->config[$key] = $value;
        $this->saveConfig();
        echo Colors::GREEN . "✅ Configuration updated: $key = $value" . Colors::NC . "\n";
    }

    private function getConfig($key) {
        if (isset($this->config[$key])) {
            echo Colors::GREEN . "$key: {$this->config[$key]}" . Colors::NC . "\n";
        } else {
            echo Colors::YELLOW . "Configuration key '$key' not found." . Colors::NC . "\n";
        }
    }

    private function showConfig() {
        echo Colors::GREEN . "🔧 Current Configuration:" . Colors::NC . "\n";
        foreach ($this->config as $key => $value) {
            if ($key === 'access_token' && $value) {
                echo "  $key: " . substr($value, 0, 20) . "...\n";
            } else {
                echo "  $key: $value\n";
            }
        }
    }

    private function resetConfig() {
        $this->config = [
            'api_url' => 'https://api.purrr.love',
            'access_token' => null,
            'api_key' => null,
            'user_id' => null
        ];
        $this->saveConfig();
        echo Colors::GREEN . "✅ Configuration reset to defaults!" . Colors::NC . "\n";
    }
    
    /**
     * Lost Pet Finder Commands
     */
    private function commandLostPetFinder($args) {
        if (empty($args)) {
            $this->showLostPetFinderHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'report':
                $this->reportLostPet($args);
                break;
            case 'search':
                $this->searchLostPets($args);
                break;
            case 'sighting':
                $this->reportSighting($args);
                break;
            case 'found':
                $this->markPetFound($args);
                break;
            case 'stats':
                $this->showLostPetStats();
                break;
            case 'facebook':
                $this->manageFacebookIntegration($args);
                break;
            case 'help':
                $this->showLostPetFinderHelp();
                break;
            default:
                echo Colors::RED . "❌ Unknown lost pet finder action: $action" . Colors::NC . "\n";
                echo "Use 'purrr lost-pet help' to see available actions.\n";
                break;
        }
    }

    private function showLostPetFinderHelp() {
        echo Colors::CYAN . "🐱 Lost Pet Finder Commands:" . Colors::NC . "\n";
        echo "  report <pet_data>           - Report a lost pet\n";
        echo "  search <criteria>           - Search for lost pets\n";
        echo "  sighting <report_id> <data> - Report a pet sighting\n";
        echo "  found <report_id>           - Mark pet as found\n";
        echo "  stats                       - Show lost pet statistics\n";
        echo "  facebook <action>           - Manage Facebook integration\n";
        echo "  help                        - Show this help message\n\n";
    }

    private function reportLostPet($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ Pet data required. Usage: purrr lost-pet report <name> <breed> <color> <location> [date]" . Colors::NC . "\n";
            return;
        }

        $petData = [
            'name' => $args[0] ?? '',
            'breed' => $args[1] ?? '',
            'color' => $args[2] ?? '',
            'last_seen_location' => $args[3] ?? '',
            'last_seen_date' => $args[4] ?? date('Y-m-d'),
            'type' => 'cat'
        ];

        try {
            $response = $this->apiRequest('POST', '/v2/lost_pet_finder/report', $petData);
            echo Colors::GREEN . "✅ Lost pet report created successfully!" . Colors::NC . "\n";
            echo "Report ID: " . ($response['report_id'] ?? 'N/A') . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to create lost pet report: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function searchLostPets($args) {
        if (empty($args)) {
            echo Colors::YELLOW . "⚠️  No search criteria provided. Searching for all active lost pets..." . Colors::NC . "\n";
        }

        $searchCriteria = [];
        if (!empty($args[0])) $searchCriteria['breed'] = $args[0];
        if (!empty($args[1])) $searchCriteria['color'] = $args[1];
        if (!empty($args[2])) $searchCriteria['radius_km'] = $args[2];

        try {
            $response = $this->apiRequest('GET', '/v2/lost_pet_finder/search', $searchCriteria);
            $this->displayLostPetSearchResults($response);
        } catch (Exception $e) {
            echo Colors::RED . "❌ Search failed: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function reportSighting($args) {
        if (count($args) < 2) {
            echo Colors::RED . "❌ Report ID and location required. Usage: purrr lost-pet sighting <report_id> <location> [description]" . Colors::NC . "\n";
            return;
        }

        $sightingData = [
            'lost_pet_report_id' => $args[0],
            'location' => $args[1],
            'description' => $args[2] ?? '',
            'sighting_date' => date('Y-m-d')
        ];

        try {
            $response = $this->apiRequest('POST', '/v2/lost_pet_finder/sighting', $sightingData);
            echo Colors::GREEN . "✅ Sighting report submitted successfully!" . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to submit sighting: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function markPetFound($args) {
        if (empty($args)) {
            echo Colors::RED . "❌ Report ID required. Usage: purrr lost-pet found <report_id>" . Colors::NC . "\n";
            return;
        }

        $reportId = $args[0];
        $foundData = [
            'found_location' => $args[1] ?? 'Home',
            'found_details' => ['reported_by' => 'CLI']
        ];

        try {
            $response = $this->apiRequest('PUT', '/v2/lost_pet_finder/found', $foundData);
            echo Colors::GREEN . "✅ Pet marked as found successfully!" . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to mark pet as found: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function showLostPetStats() {
        try {
            $response = $this->apiRequest('GET', '/v2/lost_pet_finder/statistics');
            $this->displayLostPetStats($response);
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to retrieve statistics: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function manageFacebookIntegration($args) {
        if (empty($args)) {
            echo Colors::YELLOW . "⚠️  No action specified. Available actions: connect, disconnect, status" . Colors::NC . "\n";
            return;
        }

        $action = $args[0];
        try {
            $response = $this->apiRequest('POST', '/v2/lost_pet_finder/facebook', ['action' => $action]);
            echo Colors::GREEN . "✅ Facebook integration action completed: $action" . Colors::NC . "\n";
        } catch (Exception $e) {
            echo Colors::RED . "❌ Facebook integration failed: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function displayLostPetSearchResults($results) {
        if (empty($results['results'])) {
            echo Colors::YELLOW . "🔍 No lost pets found matching your criteria." . Colors::NC . "\n";
            return;
        }

        echo Colors::CYAN . "🔍 Found " . count($results['results']) . " lost pets:" . Colors::NC . "\n\n";
        
        foreach ($results['results'] as $pet) {
            echo Colors::GREEN . "🐱 " . ($pet['pet_name'] ?? 'Unknown') . Colors::NC . "\n";
            echo "   Breed: " . ($pet['breed'] ?? 'Unknown') . "\n";
            echo "   Color: " . ($pet['color'] ?? 'Unknown') . "\n";
            echo "   Location: " . ($pet['last_seen_location'] ?? 'Unknown') . "\n";
            echo "   Date: " . ($pet['last_seen_date'] ?? 'Unknown') . "\n";
            echo "   Status: " . ($pet['status'] ?? 'Unknown') . "\n";
            if (isset($pet['distance_meters'])) {
                echo "   Distance: " . round($pet['distance_meters'] / 1000, 2) . " km\n";
            }
            echo "\n";
        }
    }

    private function displayLostPetStats($stats) {
        echo Colors::CYAN . "📊 Lost Pet Statistics:" . Colors::NC . "\n\n";
        
        if (isset($stats['overall'])) {
            echo Colors::GREEN . "Overall:" . Colors::NC . "\n";
            echo "  Total Reports: " . ($stats['overall']['total_reports'] ?? 0) . "\n";
            echo "  Active Reports: " . ($stats['overall']['active_reports'] ?? 0) . "\n";
            echo "  Found Pets: " . ($stats['overall']['found_pets'] ?? 0) . "\n";
            echo "  Success Rate: " . ($stats['overall']['success_rate'] ?? 0) . "%\n";
        }
        
        if (isset($stats['user'])) {
            echo Colors::GREEN . "\nYour Reports:" . Colors::NC . "\n";
            echo "  Your Reports: " . ($stats['user']['user_reports'] ?? 0) . "\n";
            echo "  Found: " . ($stats['user']['user_found_pets'] ?? 0) . "\n";
            echo "  Avg Days to Find: " . round($stats['user']['avg_days_to_find'] ?? 0, 1) . "\n";
        }
        
        if (isset($stats['breed_success_rates'])) {
            echo Colors::GREEN . "\nSuccess Rates by Breed:" . Colors::NC . "\n";
            foreach ($stats['breed_success_rates'] as $breed) {
                echo "  " . ($breed['breed'] ?? 'Unknown') . ": " . ($breed['success_rate'] ?? 0) . "% (" . ($breed['found_count'] ?? 0) . "/" . ($breed['total_reports'] ?? 0) . ")\n";
            }
        }
    }

    // ============================================================================
    // ADMINISTRATIVE HELP METHODS
    // ============================================================================

    private function showAdminHelp() {
        echo Colors::CYAN . "🔧 Administrative Commands:" . Colors::NC . "\n";
        echo "  status                  - Check system status and health\n";
        echo "  users [user_id]         - List users or get user details\n";
        echo "  keys                    - List all API keys\n";
        echo "  logs                    - View system logs\n";
        echo "  config                  - Show system configuration\n";
        echo "  help                    - Show this help message\n\n";
        echo Colors::YELLOW . "⚠️  Requires admin key. Use: purrr keys set admin <admin_key>" . Colors::NC . "\n\n";
    }

    private function showSetupHelp() {
        echo Colors::CYAN . "⚙️  Setup Commands:" . Colors::NC . "\n";
        echo "  database                - Import database schema\n";
        echo "  tables                  - Create application tables\n";
        echo "  admin <email> <pass>    - Create admin user\n";
        echo "  system                  - Configure system settings\n";
        echo "  help                    - Show this help message\n\n";
        echo Colors::YELLOW . "⚠️  Requires admin key. Use: purrr keys set admin <admin_key>" . Colors::NC . "\n\n";
    }

    private function showDatabaseHelp() {
        echo Colors::CYAN . "🗄️  Database Commands:" . Colors::NC . "\n";
        echo "  status                  - Check database status\n";
        echo "  repair                  - Repair database issues\n";
        echo "  backup [filename]       - Create database backup\n";
        echo "  restore <backup_file>   - Restore from backup\n";
        echo "  optimize                - Optimize database performance\n";
        echo "  migrate                 - Run database migrations\n";
        echo "  help                    - Show this help message\n\n";
        echo Colors::YELLOW . "⚠️  Requires database key. Use: purrr keys set database <database_key>" . Colors::NC . "\n\n";
    }

    private function showSystemHelp() {
        echo Colors::CYAN . "🖥️  System Commands:" . Colors::NC . "\n";
        echo "  status                  - Check system status\n";
        echo "  health                  - Detailed health check\n";
        echo "  logs                    - View system logs\n";
        echo "  cache [clear|warm]      - Manage system cache\n";
        echo "  restart                 - Restart system services\n";
        echo "  help                    - Show this help message\n\n";
        echo Colors::YELLOW . "⚠️  Requires system key. Use: purrr keys set system <system_key>" . Colors::NC . "\n\n";
    }

    private function showSupportHelp() {
        echo Colors::CYAN . "🎫 Support Commands:" . Colors::NC . "\n";
        echo "  tickets                 - View support tickets\n";
        echo "  users [user_id]         - Get user support info\n";
        echo "  logs                    - View support logs\n";
        echo "  help                    - Show this help message\n\n";
        echo Colors::YELLOW . "⚠️  Requires support key. Use: purrr keys set support <support_key>" . Colors::NC . "\n\n";
    }
}

class Colors {
    const NC = "\033[0m";
    const RED = "\033[31m";
    const GREEN = "\033[32m";
    const YELLOW = "\033[33m";
    const BLUE = "\033[34m";
    const MAGENTA = "\033[35m";
    const CYAN = "\033[36m";
    const WHITE = "\033[37m";
}

$cli = new PurrrCLI();
?>
