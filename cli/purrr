#!/usr/bin/env php
<?php
require_once __DIR__ . '/../includes/functions.php';
require_once __DIR__ . '/../includes/oauth2.php';
require_once __DIR__ . '/../includes/api_keys.php';
require_once __DIR__ . '/../includes/vr_cat_interaction.php';
require_once __DIR__ . '/../includes/ai_cat_behavior.php';
require_once __DIR__ . '/../includes/cat_trading.php';
require_once __DIR__ . '/../includes/cat_shows.php';
require_once __DIR__ . '/../includes/realtime_multiplayer.php';
require_once __DIR__ . '/../includes/cat_health_monitoring.php';

define('CLI_VERSION', '2.0.0');
define('CLI_CONFIG_FILE', $_SERVER['HOME'] . '/.purrr/config.json');

class PurrrCLI {
    private $config;
    private $apiUrl;
    private $accessToken;
    private $apiKey;

    public function __construct() {
        $this->loadConfig();
        $this->parseArguments();
    }

    private function loadConfig() {
        $configDir = dirname(CLI_CONFIG_FILE);
        if (!is_dir($configDir)) {
            mkdir($configDir, 0755, true);
        }
        
        if (file_exists(CLI_CONFIG_FILE)) {
            $this->config = json_decode(file_get_contents(CLI_CONFIG_FILE), true);
            $this->apiUrl = $this->config['api_url'] ?? 'https://api.purrr.love';
            $this->accessToken = $this->config['access_token'] ?? null;
            $this->apiKey = $this->config['api_key'] ?? null;
        } else {
            $this->config = [
                'api_url' => 'https://api.purrr.love',
                'access_token' => null,
                'api_key' => null,
                'user_id' => null
            ];
            $this->saveConfig();
        }
    }

    private function saveConfig() {
        file_put_contents(CLI_CONFIG_FILE, json_encode($this->config, JSON_PRETTY_PRINT));
    }

    private function parseArguments() {
        $args = $_SERVER['argv'];
        array_shift($args); // Remove script name
        
        if (empty($args)) {
            $this->showHelp();
            return;
        }

        $command = array_shift($args);
        $this->dispatchCommand($command, $args);
    }

    private function dispatchCommand($command, $args) {
        switch ($command) {
            case 'login':
                $this->commandLogin($args);
                break;
            case 'logout':
                $this->commandLogout($args);
                break;
            case 'cats':
                $this->commandCats($args);
                break;
            case 'games':
                $this->commandGames($args);
                break;
            case 'breeding':
                $this->commandBreeding($args);
                break;
            case 'quests':
                $this->commandQuests($args);
                break;
            case 'store':
                $this->commandStore($args);
                break;
            case 'keys':
                $this->commandApiKeys($args);
                break;
            case 'vr':
                $this->commandVR($args);
                break;
            case 'ai':
                $this->commandAI($args);
                break;
            case 'trading':
                $this->commandTrading($args);
                break;
            case 'shows':
                $this->commandShows($args);
                break;
            case 'multiplayer':
                $this->commandMultiplayer($args);
                break;
            case 'health':
                $this->commandHealth($args);
                break;
            case 'analytics':
                $this->commandAnalytics($args);
                break;
            case 'config':
                $this->commandConfig($args);
                break;
            case 'version':
                $this->commandVersion($args);
                break;
            case 'help':
            case '--help':
            case '-h':
                $this->showHelp();
                break;
            default:
                echo Colors::RED . "❌ Unknown command: $command" . Colors::NC . "\n";
                echo "Use 'purrr help' to see available commands.\n";
                break;
        }
    }

    private function commandLogin($args) {
        if ($this->accessToken) {
            echo Colors::YELLOW . "⚠️  Already logged in. Use 'purrr logout' to log out first." . Colors::NC . "\n";
            return;
        }

        echo Colors::CYAN . "🐱 Welcome to Purrr.love CLI!" . Colors::NC . "\n";
        echo "Please enter your credentials:\n\n";

        echo "Username: ";
        $username = trim(fgets(STDIN));
        
        echo "Password: ";
        system('stty -echo');
        $password = trim(fgets(STDIN));
        system('stty echo');
        echo "\n";

        try {
            $response = $this->apiRequest('POST', '/oauth/token', [
                'grant_type' => 'password',
                'username' => $username,
                'password' => $password,
                'client_id' => 'cli',
                'client_secret' => 'cli_secret'
            ]);

            if (isset($response['access_token'])) {
                $this->config['access_token'] = $response['access_token'];
                $this->config['user_id'] = $this->getUserIdFromToken($response['access_token']);
                $this->accessToken = $response['access_token'];
                $this->saveConfig();
                
                echo Colors::GREEN . "✅ Login successful!" . Colors::NC . "\n";
                echo "Welcome back, $username! 🐾\n";
            } else {
                echo Colors::RED . "❌ Login failed: Invalid response" . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Login failed: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function commandLogout($args) {
        $this->config['access_token'] = null;
        $this->config['user_id'] = null;
        $this->accessToken = null;
        $this->saveConfig();
        
        echo Colors::GREEN . "✅ Logged out successfully!" . Colors::NC . "\n";
    }

    private function commandCats($args) {
        if (empty($args)) {
            $this->showCatsHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'list':
                $this->listCats();
                break;
            case 'get':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getCat($args[0]);
                break;
            case 'create':
                $this->createCat($args);
                break;
            case 'update':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->updateCat($args[0], array_slice($args, 1));
                break;
            case 'delete':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->deleteCat($args[0]);
                break;
            case 'stats':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getCatStats($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown cats command: $action" . Colors::NC . "\n";
                $this->showCatsHelp();
                break;
        }
    }

    private function commandGames($args) {
        if (empty($args)) {
            $this->showGamesHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'play':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID and game type" . Colors::NC . "\n";
                    return;
                }
                $this->playGame($args[0], $args[1] ?? 'laser_pointer', $args[2] ?? 10);
                break;
            case 'train':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID and command" . Colors::NC . "\n";
                    return;
                }
                $this->trainCat($args[0], $args[1], $args[2] ?? 'normal');
                break;
            case 'care':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID and care type" . Colors::NC . "\n";
                    return;
                }
                $this->careForCat($args[0], $args[1]);
                break;
            case 'leaderboard':
                $this->showLeaderboard($args[0] ?? 'overall');
                break;
            default:
                echo Colors::RED . "❌ Unknown games command: $action" . Colors::NC . "\n";
                $this->showGamesHelp();
                break;
        }
    }

    private function commandVR($args) {
        if (empty($args)) {
            $this->showVRHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'start':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->startVRSession($args[0], $args[1] ?? 'webvr');
                break;
            case 'interact':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify session ID, interaction type, and options" . Colors::NC . "\n";
                    return;
                }
                $this->vrInteract($args[0], $args[1], array_slice($args, 2));
                break;
            case 'sessions':
                $this->listVRSessions();
                break;
            default:
                echo Colors::RED . "❌ Unknown VR command: $action" . Colors::NC . "\n";
                $this->showVRHelp();
                break;
        }
    }

    private function commandAI($args) {
        if (empty($args)) {
            $this->showAIHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'insights':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getAIInsights($args[0]);
                break;
            case 'patterns':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getBehaviorPatterns($args[0]);
                break;
            case 'recommendations':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getAIRecommendations($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown AI command: $action" . Colors::NC . "\n";
                $this->showAIHelp();
                break;
        }
    }

    private function commandTrading($args) {
        if (empty($args)) {
            $this->showTradingHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'list':
                $this->listTradingOffers($args);
                break;
            case 'create':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify cat ID, price, and description" . Colors::NC . "\n";
                    return;
                }
                $this->createTradingOffer($args[0], $args[1], $args[2]);
                break;
            case 'accept':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify an offer ID" . Colors::NC . "\n";
                    return;
                }
                $this->acceptTradingOffer($args[0]);
                break;
            case 'cancel':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify an offer ID" . Colors::NC . "\n";
                    return;
                }
                $this->cancelTradingOffer($args[0]);
                break;
            case 'history':
                $this->showTradingHistory();
                break;
            default:
                echo Colors::RED . "❌ Unknown trading command: $action" . Colors::NC . "\n";
                $this->showTradingHelp();
                break;
        }
    }

    private function commandShows($args) {
        if (empty($args)) {
            $this->showShowsHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'list':
                $this->listCatShows($args);
                break;
            case 'register':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify cat ID, show ID, and categories" . Colors::NC . "\n";
                    return;
                }
                $this->registerForShow($args[0], $args[1], array_slice($args, 2));
                break;
            case 'participants':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a show ID" . Colors::NC . "\n";
                    return;
                }
                $this->showParticipants($args[0]);
                break;
            case 'results':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a show ID" . Colors::NC . "\n";
                    return;
                }
                $this->showResults($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown shows command: $action" . Colors::NC . "\n";
                $this->showShowsHelp();
                break;
        }
    }

    private function commandMultiplayer($args) {
        if (empty($args)) {
            $this->showMultiplayerHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'join':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID and room type" . Colors::NC . "\n";
                    return;
                }
                $this->joinMultiplayerRoom($args[0], $args[1] ?? 'playground');
                break;
            case 'action':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify session ID, action type, and options" . Colors::NC . "\n";
                    return;
                }
                $this->multiplayerAction($args[0], $args[1], array_slice($args, 2));
                break;
            case 'rooms':
                $this->listMultiplayerRooms();
                break;
            case 'status':
                $this->showMultiplayerStatus();
                break;
            default:
                echo Colors::RED . "❌ Unknown multiplayer command: $action" . Colors::NC . "\n";
                $this->showMultiplayerHelp();
                break;
        }
    }

    private function commandHealth($args) {
        if (empty($args)) {
            $this->showHealthHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'summary':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getHealthSummary($args[0], $args[1] ?? '7d');
                break;
            case 'register':
                if (count($args) < 3) {
                    echo Colors::RED . "❌ Please specify cat ID, device type, and device name" . Colors::NC . "\n";
                    return;
                }
                $this->registerHealthDevice($args[0], $args[1], $args[2]);
                break;
            case 'devices':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->listHealthDevices($args[0]);
                break;
            case 'alerts':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getHealthAlerts($args[0]);
                break;
            default:
                echo Colors::RED . "❌ Unknown health command: $action" . Colors::NC . "\n";
                $this->showHealthHelp();
                break;
        }
    }

    private function commandAnalytics($args) {
        if (empty($args)) {
            $this->showAnalyticsHelp();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'cat':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getCatAnalytics($args[0], $args[1] ?? '30d');
                break;
            case 'user':
                $this->getUserAnalytics();
                break;
            case 'trends':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a cat ID" . Colors::NC . "\n";
                    return;
                }
                $this->getTrends($args[0], $args[1] ?? '7d');
                break;
            default:
                echo Colors::RED . "❌ Unknown analytics command: $action" . Colors::NC . "\n";
                $this->showAnalyticsHelp();
                break;
        }
    }

    private function commandConfig($args) {
        if (empty($args)) {
            $this->showConfig();
            return;
        }

        $action = array_shift($args);
        switch ($action) {
            case 'set':
                if (count($args) < 2) {
                    echo Colors::RED . "❌ Please specify key and value" . Colors::NC . "\n";
                    return;
                }
                $this->setConfig($args[0], $args[1]);
                break;
            case 'get':
                if (empty($args)) {
                    echo Colors::RED . "❌ Please specify a key" . Colors::NC . "\n";
                    return;
                }
                $this->getConfig($args[0]);
                break;
            case 'reset':
                $this->resetConfig();
                break;
            default:
                echo Colors::RED . "❌ Unknown config command: $action" . Colors::NC . "\n";
                echo "Use: config [set|get|reset] [key] [value]\n";
                break;
        }
    }

    private function commandVersion($args) {
        echo Colors::CYAN . "🐱 Purrr.love CLI v" . CLI_VERSION . Colors::NC . "\n";
        echo "The Ultimate Cat Gaming Platform\n";
    }

    // Helper methods for commands...
    private function listCats() {
        try {
            $response = $this->apiRequest('GET', '/api/v1/cats');
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "🐱 Your Cats:" . Colors::NC . "\n";
                foreach ($response['data'] as $cat) {
                    echo "  ID: {$cat['id']} | {$cat['name']} | Level {$cat['level']} | {$cat['breed']}\n";
                    echo "     Health: {$cat['health']}% | Happiness: {$cat['happiness']}% | Energy: {$cat['energy']}%\n";
                }
            } else {
                echo Colors::YELLOW . "📝 No cats found. Create one with 'purrr cats create'!" . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch cats: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getCat($catId) {
        try {
            $response = $this->apiRequest('GET', "/api/v1/cats/$catId");
            if (isset($response['data'])) {
                $cat = $response['data'];
                echo Colors::GREEN . "🐱 Cat Details:" . Colors::NC . "\n";
                echo "  Name: {$cat['name']}\n";
                echo "  Breed: {$cat['breed']}\n";
                echo "  Personality: {$cat['personality_type']}\n";
                echo "  Mood: {$cat['mood']}\n";
                echo "  Level: {$cat['level']}\n";
                echo "  Experience: {$cat['experience']}\n";
                echo "  Health: {$cat['health']}%\n";
                echo "  Hunger: {$cat['hunger']}%\n";
                echo "  Happiness: {$cat['happiness']}%\n";
                echo "  Energy: {$cat['energy']}%\n";
                echo "  Age: {$cat['age_days']} days\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch cat: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function createCat($args) {
        if (count($args) < 3) {
            echo Colors::RED . "❌ Please specify: name species personality_type [breed]" . Colors::NC . "\n";
            return;
        }

        $catData = [
            'name' => $args[0],
            'species' => $args[1],
            'personality_type' => $args[2],
            'breed' => $args[3] ?? 'mixed'
        ];

        try {
            $response = $this->apiRequest('POST', '/api/v1/cats', $catData);
            if (isset($response['data'])) {
                echo Colors::GREEN . "✅ Cat created successfully!" . Colors::NC . "\n";
                echo "  ID: {$response['data']['id']}\n";
                echo "  Name: {$response['data']['name']}\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to create cat: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function playGame($catId, $gameType, $duration) {
        try {
            $response = $this->apiRequest('POST', "/api/v1/cats/$catId/play", [
                'game_type' => $gameType,
                'duration' => $duration
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🎮 Game completed!" . Colors::NC . "\n";
                echo "  Game: $gameType\n";
                echo "  Duration: {$duration} minutes\n";
                echo "  Experience gained: {$response['data']['experience_gained']}\n";
                echo "  Happiness increase: {$response['data']['happiness_increase']}\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to play game: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function startVRSession($catId, $vrDevice) {
        try {
            $response = $this->apiRequest('POST', "/api/v1/cats/$catId/vr_interaction", [
                'vr_device' => $vrDevice
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🥽 VR session started!" . Colors::NC . "\n";
                echo "  Session ID: {$response['data']['session_id']}\n";
                echo "  Device: $vrDevice\n";
                echo "  Status: {$response['data']['status']}\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to start VR session: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getAIInsights($catId) {
        try {
            $response = $this->apiRequest('GET', "/api/v1/cats/$catId/ai_learning");
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🤖 AI Learning Insights:" . Colors::NC . "\n";
                echo "  Learning Progress: {$response['data']['learning_progress']}%\n";
                echo "  Behavior Patterns: " . count($response['data']['behavior_patterns']) . "\n";
                echo "  Learning Goals: " . count($response['data']['learning_goals']) . "\n";
                
                if (!empty($response['data']['recommendations'])) {
                    echo "  Recommendations:\n";
                    foreach ($response['data']['recommendations'] as $rec) {
                        echo "    • {$rec['title']}: {$rec['description']}\n";
                    }
                }
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to get AI insights: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function listTradingOffers($args) {
        $filters = [];
        if (!empty($args)) {
            $filters['breed'] = $args[0];
        }

        try {
            $response = $this->apiRequest('GET', '/api/v1/trading/offers', $filters);
            
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "🔄 Trading Offers:" . Colors::NC . "\n";
                foreach ($response['data'] as $offer) {
                    echo "  ID: {$offer['id']} | \${$offer['price']} | {$offer['description']}\n";
                    if (isset($offer['cat_details'])) {
                        echo "     Cat: {$offer['cat_details']['name']} ({$offer['cat_details']['breed']})\n";
                    }
                }
            } else {
                echo Colors::YELLOW . "📝 No trading offers found." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch trading offers: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function listCatShows($args) {
        $filters = [];
        if (!empty($args)) {
            $filters['status'] = $args[0];
        }

        try {
            $response = $this->apiRequest('GET', '/api/v1/shows', $filters);
            
            if (isset($response['data']) && !empty($response['data'])) {
                echo Colors::GREEN . "👑 Cat Shows:" . Colors::NC . "\n";
                foreach ($response['data'] as $show) {
                    echo "  ID: {$show['id']} | {$show['name']}\n";
                    echo "     Date: {$show['start_date']} | Categories: " . implode(', ', $show['categories']) . "\n";
                    echo "     Entry Fee: \${$show['entry_fee']} | Location: {$show['location']}\n";
                }
            } else {
                echo Colors::YELLOW . "📝 No cat shows found." . Colors::NC . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to fetch cat shows: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function joinMultiplayerRoom($catId, $roomType) {
        try {
            $response = $this->apiRequest('POST', '/api/v1/multiplayer/join', [
                'cat_id' => $catId,
                'room_type' => $roomType
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🌐 Joined multiplayer room!" . Colors::NC . "\n";
                echo "  Session ID: {$response['data']['session_id']}\n";
                echo "  Room Type: $roomType\n";
                echo "  Participants: " . count($response['data']['participants']) . "\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to join multiplayer room: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getHealthSummary($catId, $timeframe) {
        try {
            $response = $this->apiRequest('GET', "/api/v1/cats/$catId/health", [
                'timeframe' => $timeframe
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "🏥 Health Summary:" . Colors::NC . "\n";
                echo "  Overall Score: {$response['data']['overall_score']}%\n";
                echo "  Heart Rate: {$response['data']['heart_rate']} BPM\n";
                echo "  Temperature: {$response['data']['temperature']}°F\n";
                echo "  Activity Level: {$response['data']['activity_level']}\n";
                
                if (!empty($response['data']['alerts'])) {
                    echo "  Alerts:\n";
                    foreach ($response['data']['alerts'] as $alert) {
                        echo "    • {$alert['type']}: {$alert['message']}\n";
                    }
                }
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to get health summary: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    private function getCatAnalytics($catId, $timeframe) {
        try {
            $response = $this->apiRequest('GET', "/api/v1/cats/$catId/analytics", [
                'timeframe' => $timeframe
            ]);
            
            if (isset($response['data'])) {
                echo Colors::GREEN . "📊 Cat Analytics:" . Colors::NC . "\n";
                echo "  Timeframe: $timeframe\n";
                echo "  Games Played: {$response['data']['games_played']}\n";
                echo "  Training Sessions: {$response['data']['training_sessions']}\n";
                echo "  Care Sessions: {$response['data']['care_sessions']}\n";
                echo "  Experience Growth: {$response['data']['experience_growth']}%\n";
                echo "  Happiness Trend: {$response['data']['happiness_trend']}\n";
            }
        } catch (Exception $e) {
            echo Colors::RED . "❌ Failed to get cat analytics: " . $e->getMessage() . Colors::NC . "\n";
        }
    }

    // Help methods...
    private function showCatsHelp() {
        echo "🐱 Cat Commands:\n";
        echo "  list                    - List all your cats\n";
        echo "  get <id>                - Get details for a specific cat\n";
        echo "  create <name> <species> <personality> [breed] - Create a new cat\n";
        echo "  update <id> [field] [value] - Update cat information\n";
        echo "  delete <id>             - Delete a cat\n";
        echo "  stats <id>              - Show cat statistics\n";
    }

    private function showGamesHelp() {
        echo "🎮 Game Commands:\n";
        echo "  play <cat_id> <game_type> [duration] - Play a game with a cat\n";
        echo "  train <cat_id> <command> [difficulty] - Train a cat\n";
        echo "  care <cat_id> <care_type> - Care for a cat\n";
        echo "  leaderboard [category]   - Show game leaderboard\n";
    }

    private function showVRHelp() {
        echo "🥽 VR Commands:\n";
        echo "  start <cat_id> [device] - Start a VR session\n";
        echo "  interact <session_id> <type> [options] - Perform VR interaction\n";
        echo "  sessions                - List active VR sessions\n";
    }

    private function showAIHelp() {
        echo "🤖 AI Commands:\n";
        echo "  insights <cat_id>       - Get AI learning insights\n";
        echo "  patterns <cat_id>       - Show behavior patterns\n";
        echo "  recommendations <cat_id> - Get AI recommendations\n";
    }

    private function showTradingHelp() {
        echo "🔄 Trading Commands:\n";
        echo "  list [breed]            - List trading offers\n";
        echo "  create <cat_id> <price> <description> - Create trading offer\n";
        echo "  accept <offer_id>       - Accept a trading offer\n";
        echo "  cancel <offer_id>       - Cancel your trading offer\n";
        echo "  history                 - Show trading history\n";
    }

    private function showShowsHelp() {
        echo "👑 Show Commands:\n";
        echo "  list [status]           - List cat shows\n";
        echo "  register <cat_id> <show_id> <categories> - Register for a show\n";
        echo "  participants <show_id>  - Show participants\n";
        echo "  results <show_id>       - Show results\n";
    }

    private function showMultiplayerHelp() {
        echo "🌐 Multiplayer Commands:\n";
        echo "  join <cat_id> <room_type> - Join multiplayer room\n";
        echo "  action <session_id> <action> [options] - Perform action\n";
        echo "  rooms                   - List available rooms\n";
        echo "  status                  - Show multiplayer status\n";
    }

    private function showHealthHelp() {
        echo "🏥 Health Commands:\n";
        echo "  summary <cat_id> [timeframe] - Get health summary\n";
        echo "  register <cat_id> <type> <name> - Register health device\n";
        echo "  devices <cat_id>        - List health devices\n";
        echo "  alerts <cat_id>         - Show health alerts\n";
    }

    private function showAnalyticsHelp() {
        echo "📊 Analytics Commands:\n";
        echo "  cat <cat_id> [timeframe] - Get cat analytics\n";
        echo "  user                    - Get user analytics\n";
        echo "  trends <cat_id> [timeframe] - Get trends\n";
    }

    private function showHelp() {
        echo Colors::CYAN . "🐱 Purrr.love CLI v" . CLI_VERSION . Colors::NC . "\n";
        echo "The Ultimate Cat Gaming Platform Command Line Interface\n\n";
        
        echo Colors::GREEN . "Available Commands:" . Colors::NC . "\n";
        echo "  login                   - Authenticate with Purrr.love\n";
        echo "  logout                  - Log out and clear credentials\n";
        echo "  cats                    - Manage your cats\n";
        echo "  games                   - Play games and activities\n";
        echo "  breeding                - Cat breeding and genetics\n";
        echo "  quests                  - Quests and achievements\n";
        echo "  store                   - Cat store and items\n";
        echo "  keys                    - Manage API keys\n";
        echo "  vr                      - VR cat interactions\n";
        echo "  ai                      - AI behavior learning\n";
        echo "  trading                 - Cross-platform cat trading\n";
        echo "  shows                   - Cat show competitions\n";
        echo "  multiplayer             - Real-time multiplayer\n";
        echo "  health                  - Health monitoring\n";
        echo "  analytics               - Analytics and insights\n";
        echo "  config                  - Manage configuration\n";
        echo "  version                 - Show version information\n";
        echo "  help                    - Show this help message\n\n";
        
        echo "For detailed help on any command, use: purrr <command> help\n";
        echo "Example: purrr cats help\n\n";
        
        echo "🐾 Happy cat gaming! 🐾\n";
    }

    private function apiRequest($method, $endpoint, $data = null) {
        $url = $this->apiUrl . $endpoint;
        $headers = [
            'Content-Type: application/json',
            'User-Agent: PurrrCLI/' . CLI_VERSION
        ];

        if ($this->accessToken) {
            $headers[] = 'Authorization: Bearer ' . $this->accessToken;
        } elseif ($this->apiKey) {
            $headers[] = 'X-API-Key: ' . $this->apiKey;
        }

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);

        if ($method === 'POST' || $method === 'PUT') {
            curl_setopt($ch, CURLOPT_POST, true);
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'PUT') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'DELETE') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        }

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        if ($response === false) {
            throw new Exception('Request failed');
        }

        $responseData = json_decode($response, true);
        
        if ($httpCode >= 400) {
            $errorMessage = $responseData['error']['message'] ?? 'Unknown error';
            throw new Exception($errorMessage, $httpCode);
        }

        return $responseData['data'] ?? $responseData;
    }

    private function getUserIdFromToken($token) {
        // Simple token parsing - in production, you'd want proper JWT decoding
        $parts = explode('.', $token);
        if (count($parts) === 3) {
            $payload = json_decode(base64_decode($parts[1]), true);
            return $payload['user_id'] ?? null;
        }
        return null;
    }

    private function setConfig($key, $value) {
        $this->config[$key] = $value;
        $this->saveConfig();
        echo Colors::GREEN . "✅ Configuration updated: $key = $value" . Colors::NC . "\n";
    }

    private function getConfig($key) {
        if (isset($this->config[$key])) {
            echo Colors::GREEN . "$key: {$this->config[$key]}" . Colors::NC . "\n";
        } else {
            echo Colors::YELLOW . "Configuration key '$key' not found." . Colors::NC . "\n";
        }
    }

    private function showConfig() {
        echo Colors::GREEN . "🔧 Current Configuration:" . Colors::NC . "\n";
        foreach ($this->config as $key => $value) {
            if ($key === 'access_token' && $value) {
                echo "  $key: " . substr($value, 0, 20) . "...\n";
            } else {
                echo "  $key: $value\n";
            }
        }
    }

    private function resetConfig() {
        $this->config = [
            'api_url' => 'https://api.purrr.love',
            'access_token' => null,
            'api_key' => null,
            'user_id' => null
        ];
        $this->saveConfig();
        echo Colors::GREEN . "✅ Configuration reset to defaults!" . Colors::NC . "\n";
    }
}

class Colors {
    const NC = "\033[0m";
    const RED = "\033[31m";
    const GREEN = "\033[32m";
    const YELLOW = "\033[33m";
    const BLUE = "\033[34m";
    const MAGENTA = "\033[35m";
    const CYAN = "\033[36m";
    const WHITE = "\033[37m";
}

$cli = new PurrrCLI();
?>
